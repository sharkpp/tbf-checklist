{"version":3,"sources":["serviceWorker.js","models/Circle.js","models/Product.js","models/Favorite.js","views/EventSelect.js","components/FavoriteStart.js","components/CircleCard.js","components/ProductCard.js","views/CircleSelect.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","EventEmitter","require","Endpoint","BoothToken","KeyLocalStorage","booth2order","booth","spaceToken","concat","exec","slice","spaceCategory","codePointAt","indexOf","CircleModel","this","_event","_store","Object","assign","loadCompleted","orderBy","lookupBy","circles","JSON","parse","sessionStorage","getItem","_waitRequestList","_waitRequestListList","data","stringify","console","debug","length","setItem","options","circleId","reqUrls","reqInfo","_waitRequest","push","_updateCache","req","reqUrl","shift","fetch","method","then","res","json","cursor","unshift","replace","list","circleInfo","i","undefined","event","eventExhibitCourse","id","space","j","spaces","sort","a","b","emit","catch","err","error","name","listner","on","removeListener","map","boothNo","getCircleByBooth","prevCircleExhibitInfoID","nextCircleExhibitInfoID","ProductModel","seq","products","productInfo","circleExhibitInfoID","productId","orderBySeq","keys","index","indexBySeq","FavoriteModel","localStorage","key","updated","favorite","EventSelectView","to","Button","FavoriteStar","models","isCurrent","useState","isFavorite","favorited","setFavorited","setFavorite","useCallback","unsetFavorite","useEffect","onFavoriteChange","params","off","style","position","top","right","padding","onClick","icon","faStarChecked","faStarUnchecked","color","size","CircleCard","circleCut","circleCutImage","url","width","height","className","Header","variant","FavoriteStart","textAlign","marginTop","Img","src","display","border","overflow","Body","Group","controlId","Label","nameRuby","penName","webSiteURL","genre","genreFreeFormat","Type2Text","ProductCard","firstImage","images","type","page","price","firstAppearanceEventName","description","CircleSelectView","history","circle","product","setCircleList","setCircleInfo","productList","setProductList","setProductInfo","circleInfo_","getCircle","request","getProductList","productInfo_","getProduct","onCircleChange","getCircleListOrderByBooth","firstCircleInfo","getFirstBooth","onCircleLoaded","onProductChange","onProductLoaded","Spinner","animation","hasPrevCircle","prevCircleId","getPrevCircleId","faAngleLeft","hasNextCircle","nextCircleId","getNextCircleId","faAngleRight","prevProduct","getPrevSiblings","faAngleUp","hasNextProduct","nextProduct","getNextSiblings","faAngleDown","App","path","exact","render","router","EventSelect","CircleSelect","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67acd076.chunk.js","sourcesContent":["\"use struct\";\n\n// このオプションのコードは、Service Workerを登録するために使用されます。\n// register() はデフォルトでは呼び出されません。\n\n// これにより、その後の実稼働時のアクセスでアプリの読み込みが速くなり、\n// オフライン機能が提供されます。 ただし、開発者（およびユーザー）は、\n// 以前にキャッシュされたリソースがバックグラウンドで更新されるため、\n// ページで開いている既存のタブがすべて閉じられた後、ページへの以降の\n// アクセスでのみ展開された更新が表示されます。\n\n// このモデルの利点とオプトイン方法の詳細については、\n// https://bit.ly/CRA-PWA をご覧ください。\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] は IPv6 localhost アドレスです。\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 は IPv4 のローカルホストと見なされます。\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // URLコンストラクターは、SWをサポートするすべてのブラウザーで使用できます。\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // PUBLIC_URL がページの配信元と異なる発信元にある場合サービスワーカーは機能しません。\n      // これは、アセットの提供にCDNが使用されている場合に発生する可能性があります。\n      // https://github.com/facebook/create-react-app/issues/2374 を参照してください\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // これはローカルホストで実行されています。 Service Workerがまだ存在するかどうかを確認しましょう。\n        checkValidServiceWorker(swUrl, config);\n\n        // いくつかの追加のログを localhost に追加し、開発者に\n        // service worker/PWA ドキュメントを参照させます。\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // ローカルホストではありません。サービスワーカーを登録するだけです。\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // この時点で更新された事前キャッシュされたコンテンツが取得されましたが、\n              // 以前のサービスワーカーは、すべてのクライアントタブが閉じられるまで\n              // 古いコンテンツを引き続き提供します。\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // コールバックを実行\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // この時点ですべてが事前にキャッシュされています。\n              // \"コンテンツはオフラインで使用するためにキャッシュされます。\"\n              // メッセージを表示するのに最適なタイミングです。\n              console.log('Content is cached for offline use.');\n\n              // コールバックを実行\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // ページをリロードできない場合、サービスワーカーが見つかるかどうかを確認します。\n  fetch(swUrl)\n    .then(response => {\n      // Service Worker が存在し、JSファイルを実際に取得していることを確認してください。\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // サービスワーカーが見つかりません。おそらく別のアプリ。ページをリロード。\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // サービスワーカーが見つかりました。通常どおり続行。\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\"use struct\";\n\nconst EventEmitter = require('events');\n\nconst Endpoint = 'https://cors-anywhere.herokuapp.com/https://techbookfest.org/api';\n\nconst BoothToken = /^(.+?)([0-9]+)(.*)$/; // 配置を、種別\b、番号、フロア に分割するための正規表現\n\nconst KeyLocalStorage = 'circle-cache';\n\n// 配置を順番に\nfunction booth2order(booth) {\n  const spaceToken = [].concat(BoothToken.exec(booth)||['',0,'']).slice(1);\n  const spaceCategory = spaceToken[0].codePointAt(0);\n  return (\n    0x3041 <= spaceCategory && spaceCategory <= 0x3093\n      ? spaceCategory - 0x3041 + 10\n      : ['運','協'].indexOf(spaceToken[0])\n  ) * 1000 + +spaceToken[1];\n}\n\nexport default class CircleModel {\n\n  constructor() {\n\n    // イベント通知\n    this._event = new EventEmitter();\n\n    // 保持している情報\n    this._store = Object.assign({\n      loadCompleted: false,\n      orderBy: {\n        booth: [], // 配置順\n      },\n      lookupBy: {\n        booth: {}, // 配置をキーにサークルIDを引く\n      },\n      circles: {}, // サークルIDをキーにして収納されたサークルの情報\n    }, JSON.parse(sessionStorage.getItem(KeyLocalStorage)) || {});\n\n    this._waitRequestList = {};\n    this._waitRequestListList = false;\n  }\n\n  _updateCache() {\n    const data = JSON.stringify(this._store);\n    console.debug('circle data len', data.length);\n    sessionStorage.setItem(KeyLocalStorage, data);\n  }\n\n  // サークルを要求\n  request(options) {\n    options = options || {};\n    options.circleId = options.circleId || null;\n\n    const eventId = 'tbf07';\n    let reqUrls = [];\n    let reqInfo = false;\n\n    if (options.circleId) { // 特定のサークルのみ取得\n      if (this._waitRequest[options.circleId]) { // 要求中なので何もしない\n        console.debug(`request wait for ${options.circleId}`);\n        return;\n      }\n      reqUrls.push(`${Endpoint}/circle/${options.circleId}`);\n      this._waitRequest[options.circleId] = true;\n      reqInfo = options.circleId;\n    }\n    else { // 全てのサークルを取得\n      if (0&&this._store.loadCompleted && !options.force) {\n        this._waitRequestList = false;\n        console.debug('circle list uses cache');\n        this._event.emit('change');\n        this._event.emit('loaded');\n        return;\n      }\n      this._waitRequestList = reqInfo = true;\n      this._store.loadCompleted = false;\n      this._updateCache();\n      reqUrls.push(`${Endpoint}/circle?eventID=${eventId}&eventExhibitCourseID=3&visibility=site&limit=100&onlyAdoption=true`);\n      //reqUrls.push(`${Endpoint}/circle?eventID=${eventId}&visibility=site&limit=100&onlyAdoption=true`);\n    }\n\n    // 情報を要求\n    const req = () => {\n      const reqUrl = reqUrls.shift();\n      if (!reqUrl) { // 取得完了\n        if (true === reqInfo) { //console.log('CircleModel request comp!');\n          this._waitRequestList = false;\n          this._store.loadCompleted = true;\n        }\n        else {\n          delete this._waitRequest[reqInfo];\n        }\n        this._updateCache();\n        this._event.emit('change');\n        this._event.emit('loaded');\n      }\n      else { // 取得継続中\n        fetch(reqUrl, {\n          method: 'GET'\n        }).then((res) => {\n          return res.json();\n        }).then((data) => {\n          if (data.cursor) { // 継続カーソルが存在するので次を追加\n            reqUrls.unshift(`${reqUrl.replace(/&cursor=.+$/,'')}&cursor=${data.cursor}`);\n          }\n\n          //console.log('CircleModel request',data);\n\n          if (!data.list) {\n            const circleInfo = data;\n            // サークル情報更新\n            delete circleInfo.event;\n            delete circleInfo.eventExhibitCourse;\n            this._store.circles[circleInfo.id] = circleInfo;\n            // 配置からサークルIdを引くための情報を更新\n            for (let j = 0, space; undefined !== (space = circleInfo.spaces[j]); ++j) {\n              this._store.lookupBy.booth[space] = circleInfo.id;\n              if (this._store.orderBy.booth.indexOf(space) < 0) {\n                this._store.orderBy.booth.push(space);\n              }\n            }\n          }\n          else {\n            for (let i = 0, circleInfo; undefined !== (circleInfo = data.list[i]); ++i) {\n              delete circleInfo.event;\n              delete circleInfo.eventExhibitCourse;\n              // サークル情報更新\n              this._store.circles[circleInfo.id] = circleInfo;\n              // 配置からサークルIdを引くための情報を更新\n              for (let j = 0, space; undefined !== (space = circleInfo.spaces[j]); ++j) {\n                this._store.lookupBy.booth[space] = circleInfo.id;\n                if (this._store.orderBy.booth.indexOf(space) < 0) {\n                  this._store.orderBy.booth.push(space);\n                }\n              }\n            }\n          }\n\n          this._store.orderBy.booth = this._store.orderBy.booth.sort((a, b) => {\n            // 運＜協＜あ〜\n            const spaceOrderA = booth2order(a);\n            const spaceOrderB = booth2order(b);\n            return spaceOrderA - spaceOrderB;\n          });\n          \n          this._updateCache();\n          this._event.emit('change');\n\n          // 次を要求\n          return req();\n        }).catch((err) => {\n          return console.error(err);\n        });\n      }\n    };\n\n    req();\n  }\n\n  // 通知を登録\n  on(name, listner) {\n    this._event.on(name, listner);\n    if (0 <= ['change','loaded'].indexOf(name) &&\n        false === this._waitRequestList) {\n      listner(name);\n    }\n  }\n\n  // 通知を解除\n  off(name, listner) {\n    this._event.removeListener(name, listner);\n  }\n\n  getCircleListOrderByBooth() {\n    return (this._store.orderBy.booth||[]).map((boothNo) => {\n      const circleInfo = this.getCircleByBooth(boothNo) || {};\n      return circleInfo.id;\n    });\n  }\n\n  // サークル情報を配置から取得\n  getCircleByBooth(boothNo) {\n    return this._store.circles[\n      this._store.lookupBy.booth[\n        boothNo\n      ]\n    ];\n  }\n\n  // サークル情報を配置から取得\n  getCircleBoothOrder(circleId) {\n    if (false !== this._waitRequestList) {\n      return -2;\n    }\n    return this._store.orderBy.booth.indexOf(((this._store.circles[circleId]||{}).spaces||[])[0]);\n  }\n\n  // サークルを取得\n  getCircle(circleId) {\n    return this._store.circles[circleId];\n  }\n\n  // 配置の一番最初を取得\n  getFirstBooth() {\n    return (\n      false === this._waitRequestList &&\n      this.getCircleByBooth(this._store.orderBy.booth[0])\n    );\n  }\n\n  // 配置の一番最後を取得\n  getLastBooth() {\n    return (\n      false === this._waitRequestList &&\n      this.getCircleByBooth(this._store.orderBy.booth[this._store.orderBy.booth.length - 1])\n    );\n  }\n\n  // 前のサークルがあるか？\n  hasPrevCircle(circleId) {\n    const circleInfo = this._store.circles[circleId];\n    return !!(circleInfo && circleInfo.prevCircleExhibitInfoID);\n  }\n\n  // 次のサークルがあるか？\n  hasNextCircle(circleId) {\n    const circleInfo = this._store.circles[circleId];\n    return !!(circleInfo && circleInfo.nextCircleExhibitInfoID);\n  }\n\n  // 前のサークルを取得\n  getPrevCircle(circleId) {\n    const circleInfo = this._store.circles[circleId];\n    return circleInfo && circleInfo.prevCircleExhibitInfoID && this._store.circles[circleInfo.prevCircleExhibitInfoID];\n  }\n\n  // 次のサークルを取得\n  getNextCircle(circleId) {\n    const circleInfo = this._store.circles[circleId];\n    return circleInfo && circleInfo.nextCircleExhibitInfoID && this._store.circles[circleInfo.nextCircleExhibitInfoID];\n  }\n\n  // 前のサークルを取得\n  getPrevCircleId(circleId) {\n    const circleInfo = this._store.circles[circleId];\n    return circleInfo && circleInfo.prevCircleExhibitInfoID;\n  }\n\n  // 次のサークルを取得\n  getNextCircleId(circleId) {\n    const circleInfo = this._store.circles[circleId];\n    return circleInfo && circleInfo.nextCircleExhibitInfoID;\n  }\n}\n","\"use struct\";\n\nconst EventEmitter = require('events');\n\nconst Endpoint = 'https://cors-anywhere.herokuapp.com/https://techbookfest.org/api';\n\nexport default class ProductModel {\n\n  constructor() {\n\n    // イベント通知\n    this._event = new EventEmitter();\n\n    // 保持している情報\n    this._store = {\n      orderBy: {\n        seq: {},\n      },\n      products: {}, // サークルIDをキーにして収納された本の情報\n    };\n  }\n\n  // 製品を要求\n  request(options) {\n    options = options || {};\n    options.circleId = options.circleId || null;\n\n    let reqUrls = [];\n    let reqProductList = false;\n\n    if (options.circleId) {\n      reqUrls.push(`${Endpoint}/product?circleExhibitInfoID=${options.circleId}&limit=100`);\n    }\n    else {\n      return;\n    }\n\n    // 情報を要求\n    const req = () => {\n      const reqUrl = reqUrls.shift();\n      if (!reqUrl) { // 取得完了\n        if (reqProductList) { //console.log('ProductModel request comp!');\n          this._waitProductList = false;\n        }\n        this._event.emit('change');\n        this._event.emit('loaded');\n      }\n      else { // 取得継続中\n        fetch(reqUrl, {\n          method: 'GET'\n        }).then((res) => {\n          return res.json();\n        }).then((data) => {\n          if (data.cursor) { // 継続カーソルが存在するので次を追加\n            reqUrls.unshift(`${reqUrl.replace(/&cursor=.+$/,'')}&cursor=${data.cursor}`);\n          }\n\n          //console.log('ProductModel request',data);\n\n          if (data.list) {\n            for (let i = 0, productInfo; undefined !== (productInfo = data.list[i]); ++i) {\n              // サークル情報更新\n              const circleId = productInfo.circleExhibitInfoID;\n              this._store.products[circleId] = this._store.products[circleId] || {};\n              this._store.products[circleId][productInfo.id] = productInfo;\n              this._store.orderBy.seq[circleId] = this._store.orderBy.seq[circleId] || [];\n              this._store.orderBy.seq[circleId][productInfo.seq-1] = productInfo.id;\n            }\n          }\n\n          this._event.emit('change');\n\n          // 次を要求\n          return req();\n        }).catch((err) => {\n          return console.error(err);\n        });\n      }\n    };\n\n    req();\n  }\n\n  // 通知を登録\n  on(name, listner) {\n    this._event.on(name, listner);\n  }\n\n  // 通知を解除\n  off(name, listner) {\n    this._event.removeListener(name, listner);\n  }\n\n  // 製品を取得\n  getProductOrder(circleId, productId) {\n    const orderBySeq = this._store.orderBy.seq[circleId] || [];\n    return orderBySeq ? orderBySeq.indexOf(productId) : -1;\n  }\n\n  // 製品を取得\n  getProductList(circleId) {\n    const products = this._store.products[circleId];\n    return products && Object.keys(products);\n  }\n\n  // 製品を取得\n  getProductByIndex(circleId, index) {\n    const products   = this._store.products[circleId] || {};\n    const orderBySeq = this._store.orderBy.seq[circleId] || [];\n    return products[orderBySeq[index]] || false;\n  }\n\n  // 製品を取得\n  getProduct(circleId, productId) {\n    const product = (this._store.products[circleId] || {})[productId] || false;\n    return product;\n  }\n\n  // 製品を取得\n  getProductCount(circleId) {\n    const orderBySeq = this._store.orderBy.seq[circleId];\n    return orderBySeq ? orderBySeq.length : -1;\n  }\n\n  // 次の製品を取得\n  hasNextProduct(circleId, productId) {\n    const orderBySeq = this._store.orderBy.seq[circleId];\n    const indexBySeq = orderBySeq && orderBySeq.indexOf(productId);\n    return !!(orderBySeq && orderBySeq[indexBySeq + 1]);\n  }\n\n  // 前の製品を取得\n  getPrevSiblings(circleId, productId) {\n    const products   = this._store.products[circleId];\n    const orderBySeq = this._store.orderBy.seq[circleId];\n    const indexBySeq = orderBySeq && orderBySeq.indexOf(productId);\n    return (orderBySeq && products[orderBySeq[indexBySeq - 1]]) || false;\n  }\n\n  // 次の製品を取得\n  getNextSiblings(circleId, productId) {\n    const products   = this._store.products[circleId];\n    const orderBySeq = this._store.orderBy.seq[circleId];\n    const indexBySeq = orderBySeq && orderBySeq.indexOf(productId);\n    return (orderBySeq && products[orderBySeq[indexBySeq + 1]]) || false;\n  }\n\n}\n","\"use struct\";\n\nconst EventEmitter = require('events');\n\nconst KeyLocalStorage = 'favorite';\n\nconst eventId = 'tbf07';\n\nexport default class FavoriteModel {\n\n  constructor() {\n\n    // イベント通知\n    this._event = new EventEmitter();\n\n    // 保持している情報\n    this._store = JSON.parse(localStorage.getItem(KeyLocalStorage) || '{}');\n  }\n\n  // 通知を登録\n  on(name, listner) {\n    this._event.on(name, listner);\n  }\n\n  // 通知を解除\n  off(name, listner) {\n    this._event.removeListener(name, listner);\n  }\n\n  isFavorite(circleId, productId) {\n    return !!(productId\n      ? (this._store[eventId] && this._store[eventId][circleId] && this._store[eventId][circleId][productId])\n      : (this._store[eventId] && this._store[eventId][circleId] && this._store[eventId][circleId]['circle'])\n    );\n  }\n\n  setFavorite(circleId, productId) { //console.log('setFavorite', circleId, productId);\n    if (circleId) {\n      this._store[eventId] = this._store[eventId] || {};\n      this._store[eventId][circleId] = this._store[eventId][circleId] || { 'circle': null };\n      const key = productId ? productId : 'circle';\n      const updated = true !== this._store[eventId][circleId][key];\n      this._store[eventId][circleId][key] = true;\n      if (updated) {\n        localStorage.setItem(KeyLocalStorage, JSON.stringify(this._store));\n        this._event.emit('change', { circleId: circleId, productId: productId, favorite: true });\n      }\n    }\n  }\n\n  unsetFavorite(circleId, productId) { //console.log('unsetFavorite', circleId, productId);\n    if (circleId) {\n      this._store[eventId] = this._store[eventId] || {};\n      this._store[eventId][circleId] = this._store[eventId][circleId] || { 'circle': null };\n      const key = productId ? productId : 'circle';\n      const updated = true === this._store[eventId][circleId][key];\n      delete this._store[eventId][circleId][key];\n      if (updated) {\n        localStorage.setItem(KeyLocalStorage, JSON.stringify(this._store));\n        this._event.emit('change', { circleId: circleId, productId: productId, favorite: false });\n      }\n    }\n  }\n\n}\n","\"use struct\";\n\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap'\n\nfunction EventSelectView() {\n  return (\n    <div>\n      <LinkContainer to=\"/7/circle/\">\n        <Button>技術書典７</Button>\n      </LinkContainer>\n    </div>\n  );\n}\n\nexport default EventSelectView;\n","\n\"use struct\";\n\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStar as faStarChecked } from '@fortawesome/free-solid-svg-icons'\nimport { faStar as faStarUnchecked } from '@fortawesome/free-regular-svg-icons'\n\n// 製品表示用\nfunction FavoriteStar({ models, circleId, productId, isCurrent }) {\n  const { favorite } = models;\n\n  const [ favorited,  setFavorited ] = useState(favorite.isFavorite(circleId, productId));\n\n  const setFavorite   = useCallback(() => favorite.setFavorite  (circleId, productId), [favorite, circleId, productId]);\n  const unsetFavorite = useCallback(() => favorite.unsetFavorite(circleId, productId), [favorite, circleId, productId]);\n\n  useEffect(() => {//console.log('CircleSelectView','useEffect');\n    const onFavoriteChange = (params) => {\n      if (circleId  === params.circleId &&\n          productId === params.productId) {\n        setFavorited(params.favorite);\n      }\n    };\n    // 通知先を登録\n    if (isCurrent) {\n      favorite.on('change',onFavoriteChange);\n      //console.log('fav on',[circleId, productId]);\n    }\n    // クリーンアップ関数を返す\n    return isCurrent ? (() => {\n      favorite.off('change',onFavoriteChange);\n      //console.log('fav off',[circleId, productId]);\n    }) : (() => {});\n  }, [isCurrent, favorite, circleId, productId]);\n\n  return (\n    <div style={{\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      padding: '.75rem',\n    }}\n    onClick={favorited ? unsetFavorite : setFavorite}\n    >\n      <FontAwesomeIcon\n        icon={favorited ? faStarChecked : faStarUnchecked}\n        color={\"#ffcc00\"}\n        size=\"lg\"\n        onClick={favorited ? unsetFavorite : setFavorite}\n      />\n    </div>\n  );\n}\n\nexport default FavoriteStar;\n","\"use struct\";\n\nimport React from 'react';\n\nimport Card from 'react-bootstrap/Card'\nimport Badge from 'react-bootstrap/Badge'\nimport Form from 'react-bootstrap/Form'\n\nimport FavoriteStart from './FavoriteStart'\n\n// サークル表示用\nfunction CircleCard({ models, circleInfo, isCurrent }) {\n  const circleCut = (circleInfo && circleInfo.circleCutImage) || { url: '', width: 0, height: 1 };\n  return (\n    <div className='circle-card'>\n      <Card >\n        <Card.Header>\n          <Badge variant=\"secondary\">{(circleInfo.spaces||[])[0]}</Badge>\n          {circleInfo.name||' '}\n          <FavoriteStart models={models} isCurrent={isCurrent}\n            circleId={circleInfo && circleInfo.id} />\n        </Card.Header>\n        <div style={{ width: '100%', textAlign: 'center', marginTop: '8px' }} >\n          {circleCut.url && <Card.Img\n            variant=\"top\"\n            src={circleCut.url}\n            style={{\n              width:  circleCut.width * 200 / circleCut.height,\n              height: 200,\n            }}\n          />}\n          {!circleCut.url && <div\n            style={{\n              display: 'inline-block',\n              width:  141,\n              height: 200,\n              border: '5px solid black',\n              overflow: 'hidden'\n            }}\n          >\n            <div style={{ top: '50%', position: 'relative', marginTop: '-0.5em', }}>\n              NO IMAGE\n            </div>\n          </div>}\n        </div>\n        <Card.Body>\n          <div className='card-text'\n            // Card.Text だと \"<div> cannot appear as a descendant of <p>\" が出る\n          >\n            <Form>\n              <Form.Group controlId=\"name\">\n                <Form.Label>サークル名</Form.Label>\n                <div className='form-control-plaintext' >{!circleInfo.nameRuby?circleInfo.name:`${circleInfo.name}(${circleInfo.nameRuby})`}</div>\n              </Form.Group>\n              <Form.Group controlId=\"spaces\">\n                <Form.Label>配置</Form.Label>\n                <div className='form-control-plaintext' >{(circleInfo.spaces&&circleInfo.spaces[0])||''}</div>\n              </Form.Group>\n              <Form.Group controlId=\"penName\">\n                <Form.Label>ペンネーム</Form.Label>\n                <div className='form-control-plaintext' >{circleInfo.penName}</div>\n              </Form.Group>\n              <Form.Group controlId=\"webSiteURL\">\n                <Form.Label>Webサイト</Form.Label>\n                <div className='form-control-plaintext' >{circleInfo.webSiteURL}</div>\n              </Form.Group>\n              <Form.Group controlId=\"genre\">\n                <Form.Label>ジャンル</Form.Label>\n                <div className='form-control-plaintext' >{circleInfo.genre}</div>\n              </Form.Group>\n              <Form.Group controlId=\"genreFreeFormat\">\n                <Form.Label>ジャンル詳細</Form.Label>\n                <div className='form-control-plaintext' >{circleInfo.genreFreeFormat}</div>\n              </Form.Group>\n            </Form>\n          </div>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nexport default CircleCard;\n","\"use struct\";\n\nimport React from 'react';\n\nimport Card from 'react-bootstrap/Card'\nimport Badge from 'react-bootstrap/Badge'\nimport Form from 'react-bootstrap/Form'\n\nimport FavoriteStart from './FavoriteStart'\n\nconst Type2Text = {\n  'fanzine':  '同人誌',\n  'commerce': '商業誌',\n};\n\n// 製品表示用\nfunction ProductCard({ models, circleInfo, productInfo, isCurrent }) {\n  const firstImage = (productInfo && productInfo.images && productInfo.images[0]) || { url: '', width: 0, height: 1 };\n  return (\n    <div className='product-card'>\n      <Card >\n        <Card.Header>\n          <Badge variant=\"secondary\">{(circleInfo.spaces||[])[0]}</Badge>\n          {circleInfo.name||' '}\n          <FavoriteStart models={models} isCurrent={isCurrent}\n            circleId={circleInfo && circleInfo.id} productId={productInfo && productInfo.id} />\n        </Card.Header>\n        {false&&<Card.Header>\n          {productInfo.name||' '}\n        </Card.Header>}\n        <div style={{ width: '100%', textAlign: 'center', marginTop: '8px' }} >\n          {firstImage.url && <Card.Img\n            variant=\"top\"\n            src={firstImage.url}\n            style={{\n              width:  firstImage.width * 200 / firstImage.height,\n              height: 200,\n            }}\n          />}\n        </div>\n        <Card.Body>\n          <div className='card-text'\n            // Card.Text だと \"<div> cannot appear as a descendant of <p>\" が出る\n          >\n            <Form>\n            <Form.Group controlId=\"name\">\n                  <Form.Label>頒布物</Form.Label>\n                  <div className='form-control-plaintext' >{productInfo.name}</div>\n                </Form.Group>\n                <Form.Group controlId=\"page\">\n                  <Form.Label>種類 / ページ / 価格</Form.Label>\n                  <div className='form-control-plaintext' >{`${Type2Text[productInfo.type]} / ${productInfo.page} ページ / ${productInfo.price?productInfo.price+' 円':''}`}</div>\n                </Form.Group>\n                <Form.Group controlId=\"firstAppearanceEventName\">\n                  <Form.Label>初出</Form.Label>\n                  <div className='form-control-plaintext' >{productInfo.firstAppearanceEventName}</div>\n                </Form.Group>\n                <Form.Group controlId=\"description\">\n                  <Form.Label>概要</Form.Label>\n                  <pre className='form-control-plaintext' >{productInfo.description}</pre>\n                </Form.Group>\n              </Form>\n          </div>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nexport default ProductCard;\n","\"use struct\";\n\nimport React, { useEffect, useState } from 'react';\n\nimport { Button, Spinner } from 'react-bootstrap';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faAngleLeft, faAngleRight, faAngleUp, faAngleDown } from '@fortawesome/free-solid-svg-icons'\n\nimport CircleCard from '../components/CircleCard'\nimport ProductCard from '../components/ProductCard'\n\nfunction CircleSelectView({ models, history, params }) {\n  const { circle, product } = models;\n  const { event, circleId, productId } = params;\n  //console.log('CircleSelectView',{models, history, params});\n\n  const [ circleList,  setCircleList  ] = useState();\n  const [ circleInfo,  setCircleInfo  ] = useState();\n  const [ productList, setProductList ] = useState();\n  const [ productInfo, setProductInfo ] = useState();\n\n  useEffect(() => {\n    const circleInfo_ = circle.getCircle(circleId);\n    circleInfo_ ? setCircleInfo(circleInfo_)\n                : circle.request({ circleId: circleId });\n    //\n    const productList_ = product.getProductList(circleId);\n    productList_ ? setProductList(productList)\n                 : product.request({ circleId: circleId });\n  }, [circle, circleId, product, productList]);\n\n  useEffect(() => {\n    if (circleId) {\n      const productInfo_ = product.getProduct(circleId, productId);\n      productInfo_ ? setProductInfo(productInfo_)\n                   : product.request({ circleId: circleId });\n    }\n  }, [circleId, product, productId]);\n\n  useEffect(() => {//console.log('CircleSelectView','useEffect');\n    const onCircleChange = () => {\n      //console.log('CircleSelectView','onCircleChange',circleId,circle.getCircle(circleId));\n      if (!circleId) {\n        // サークルを選択していない場合は一番初めのサークルの飛ぶ\n        const firstCircleInfo = circle.getFirstBooth();\n        if (firstCircleInfo) {\n          history.replace(`/${event}/circle/${firstCircleInfo.id}`);\n        }\n      }\n      else {\n        // 今のサークルを表示\n        setCircleList(circle.getCircleListOrderByBooth());\n        setCircleInfo(circle.getCircle(circleId));\n        setProductList(product.getProductList(circleId));\n        setProductInfo(product.getProduct(circleId, productId));\n      }\n    };\n    const onCircleLoaded = () => {\n      //console.log('CircleSelectView','onCircleLoaded',circleId,circle.getCircle(circleId));\n      // サークルの製品を取得\n        setCircleList(circle.getCircleListOrderByBooth());\n        setCircleInfo(circle.getCircle(circleId));\n        setProductList(product.getProductList(circleId));\n        setProductInfo(product.getProduct(circleId, productId));\n    };\n    const onProductChange = () => {\n      //console.log('CircleSelectView','onProductChange',circleId,productId,product.getProduct(circleId, productId));\n      setProductList(product.getProductList(circleId));\n      setProductInfo(product.getProduct(circleId, productId));\n    };\n    const onProductLoaded = () => {\n      //console.log('CircleSelectView','onProductLoaded',circleId,productId,product.getProduct(circleId, productId));\n      setProductList(product.getProductList(circleId));\n      setProductInfo(product.getProduct(circleId, productId));\n    };\n    // 通知先を登録\n    circle.on('change',onCircleChange);\n    circle.on('loaded',onCircleLoaded);\n    product.on('change',onProductChange);\n    product.on('loaded',onProductLoaded);\n    // クリーンアップ関数を返す\n    return () => {\n      circle.off('change',onCircleChange);\n      circle.off('loaded',onCircleLoaded);\n      product.off('change',onProductChange);\n      product.off('loaded',onProductLoaded);\n    };\n  }, [event, circle, product, circleId, productId, history]);\n\n  const circleInfo_  = circleInfo  || { id: circleId };\n  const productInfo_ = productInfo || { id: productId };\n\n  return (\n    <div className=\"card-container\">\n      {[\n        <div className=\"loading\">\n          <Spinner animation=\"border\" />\n        </div>,\n        <CircleCard\n          key={`_${circleId}`}\n          isCurrent={true}\n          models={models}\n          circleInfo={circleInfo_}\n        />,\n        <ProductCard\n          key={`_${circleId}_${productId}`}\n          isCurrent={true}\n          models={models}\n          circleInfo={circleInfo_}\n          productInfo={productInfo_}\n        />\n      ][\n        !circleInfo ? 0 : (!productInfo || !productInfo.name ? 1 : 2)\n      ]}\n\n      <Button\n        variant=\"link\"\n        className={\"circle-prev\"+(circleInfo&&circle.hasPrevCircle(circleId)?'':' btn-hidden')}\n        onClick={() => {//console.log('ButtonBack');\n          const prevCircleId = circle.getPrevCircleId(circleId);\n          prevCircleId && history.push(`/${event}/circle/${prevCircleId}`);\n        }}\n      >\n        <FontAwesomeIcon icon={faAngleLeft} color={\"black\"} size=\"3x\" />\n      </Button>\n\n      <Button\n        variant=\"link\"\n        className={\"circle-next\"+(circleInfo&&circle.hasNextCircle(circleId)?'':' btn-hidden')}\n        onClick={() => {//console.log('ButtonNext');\n          const nextCircleId = circle.getNextCircleId(circleId);\n          nextCircleId && history.push(`/${event}/circle/${nextCircleId}`);\n        }}\n      >\n        <FontAwesomeIcon icon={faAngleRight} color={\"black\"} size=\"3x\" />\n      </Button>\n\n\n      <Button\n        variant=\"link\"\n        className={\"product-prev\"+(productId?'':' btn-hidden')}\n        onClick={() => {//console.log('ButtonTop');\n          const prevProduct = product.getPrevSiblings(circleId, productId);\n          history.push(\n            prevProduct\n              ? `/${event}/circle/${circleId}/${prevProduct.id}`\n              : `/${event}/circle/${circleId}`\n            );\n        }}\n      >\n        <FontAwesomeIcon icon={faAngleUp} color={\"black\"} size=\"3x\" />\n      </Button>\n\n      <Button\n        variant=\"link\"\n        className={\"product-next\"+(product.hasNextProduct(circleId,productId)?'':' btn-hidden')}\n        onClick={() => {//console.log('ButtonButton');\n          const nextProduct = product.getNextSiblings(circleId, productId);\n          history.push(\n            nextProduct\n              ? `/${event}/circle/${circleId}/${nextProduct.id}`\n              : `/${event}/circle/${circleId}`\n            );\n        }}\n      >\n        <FontAwesomeIcon icon={faAngleDown} color={\"black\"} size=\"3x\" />\n      </Button>\n\n    </div>\n  );\n}\n\nexport default CircleSelectView;\n","\"use struct\";\n\nimport React from 'react';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport './App.css';\nimport EventSelectView  from './views/EventSelect';\nimport CircleSelectView from './views/CircleSelect';\n\nfunction App({ models }) {\n  return (\n    <Router>\n      {false&&<nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about/\">About</Link>\n          </li>\n          <li>\n            <Link to=\"/users/\">Users</Link>\n          </li>\n        </ul>\n      </nav>}\n\n      <Route\n        path=\"/\" exact\n        render={(router) => \n          <EventSelectView\n            models={models}\n            history={router.history}\n            params={router.match.params}\n          />}\n      />\n      <Route\n        path=\"/:event/circle/:circleId?/:productId?\"\n        render={(router) => \n          <CircleSelectView\n            models={models}\n            history={router.history}\n            params={router.match.params}\n          />}\n      />\n    </Router>\n  );\n}\n\nexport default App;\n","\"use struct\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nimport CircleModel from './models/Circle';\nimport ProductModel from './models/Product';\nimport FavoriteModel from './models/Favorite';\n\nimport App from './App';\n\n\nconst models = {\n  circle:  new CircleModel(),\n  product: new ProductModel(),\n  favorite: new FavoriteModel(),\n};\n\nmodels.circle.request();\n\nReactDOM.render(\n  <App models={models} />,\n  document.getElementById('root')\n);\n\n// アプリをオフラインで動作させてより速くロードしたい場合は、以下で unregister() を\n// register() に変更できます。これにはいくつかの落とし穴があります。\n// サービスワーカーの詳細: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n\n// 要求スペック\n//   config#onUpdate(registration);\n//   config#onSuccess(registration);\n// serviceWorker.register(config);\n"],"sourceRoot":""}