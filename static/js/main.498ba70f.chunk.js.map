{"version":3,"sources":["serviceWorker.js","models/Circle.js","models/Product.js","models/Favorite.js","views/EventSelect.js","components/FavoriteStar.js","components/CircleCard.js","components/ProductCard.js","components/HamburgerMenuButton.js","views/CircleSelect.js","components/MessageBox.js","views/FavoriteImport.js","views/FavoriteList.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","EventEmitter","require","Endpoint","BoothToken","KeyLocalStorage","booth2order","booth","spaceToken","concat","exec","slice","spaceCategory","codePointAt","indexOf","CircleModel","this","_event","_store","Object","assign","loadCompleted","orderBy","lookupBy","circles","JSON","parse","sessionStorage","getItem","_waitRequest","_waitRequestList","data","stringify","console","debug","length","setItem","options","circleId","reqUrls","reqInfo","push","_updateCache","req","reqUrl","shift","fetch","method","then","res","json","cursor","unshift","replace","list","circleInfo","i","undefined","event","eventExhibitCourse","id","space","j","spaces","sort","a","b","emit","catch","err","error","name","listner","on","removeListener","map","boothNo","getCircleByBooth","prevCircleExhibitInfoID","nextCircleExhibitInfoID","favList","reqList","forEach","favItem","circleName","keys","request","ProductModel","seq","products","_reqWait","reqCircleId","productInfo","circleExhibitInfoID","productId","orderBySeq","index","indexBySeq","productName","productPrice","price","FileDownload","FavoriteModel","localStorage","key","updated","favorite","text","e","eventId_","hasProduct","circleList","productList","eventId","reduce","r","EventSelectView","to","Button","FavoriteStar","models","isCurrent","useState","isFavorite","favorited","setFavorited","setFavorite","useCallback","unsetFavorite","useEffect","onFavoriteChange","params","off","style","position","top","right","padding","onClick","icon","faStarChecked","faStarUnchecked","color","size","CircleCard","circleCut","circleCutImage","url","width","height","className","Header","variant","textAlign","marginTop","Img","src","display","border","overflow","Body","Group","controlId","Label","nameRuby","penName","webSiteURL","genre","whiteSpace","genreFreeFormat","Type2Text","ImageSize","ProductCard","firstImage","images","justifyContent","alignItems","type","page","join","firstAppearanceEventName","description","HamburgerMenuButton","props","context","handleClick","bind","preventDefault","href","faBars","React","Component","CircleSelectView","history","circle","product","setCircleList","setCircleInfo","setProductList","setProductInfo","handleFavoriteList","handleFavoriteSave","export","handleFavoriteLoad","circleInfo_","getCircle","getProductList","productInfo_","getProduct","onCircleChange","getCircleListOrderByBooth","firstCircleInfo","getFirstBooth","onCircleLoaded","onProductChange","onProductLoaded","Spinner","animation","Dropdown","Toggle","as","Menu","Item","eventKey","onSelect","Divider","hasPrevCircle","prevCircleId","getPrevCircleId","faAngleLeft","hasNextCircle","nextCircleId","getNextCircleId","faAngleRight","prevProduct","getPrevSiblings","faAngleUp","hasNextProduct","nextProduct","getNextSiblings","faAngleDown","MessageBox","title","message","onClose","show","setShow","handleClose","Modal","onHide","closeButton","Title","Footer","MsgImportSuccess","MsgImportFailed","FavoriteImportView","setMessage","useDropzone","accept","acceptedFiles","rejectedFiles","getRootProps","getInputProps","rejectedFilesItems","file","path","handleImportClick","reader","FileReader","onload","import","target","result","readAsText","handleBackClick","goBack","handleMessageClose","handleMessageCloseWithBack","ButtonToolbar","disabled","FavoriteListView","setFavList","withUnknown","priceTotal","setPriceTotal","updateFavList","mergeFavorite","Table","striped","bordered","wordBreak","colSpan","App","exact","render","router","EventSelect","CircleSelect","FavoriteImport","FavoriteList","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.498ba70f.chunk.js","sourcesContent":["\"use struct\";\n\n// このオプションのコードは、Service Workerを登録するために使用されます。\n// register() はデフォルトでは呼び出されません。\n\n// これにより、その後の実稼働時のアクセスでアプリの読み込みが速くなり、\n// オフライン機能が提供されます。 ただし、開発者（およびユーザー）は、\n// 以前にキャッシュされたリソースがバックグラウンドで更新されるため、\n// ページで開いている既存のタブがすべて閉じられた後、ページへの以降の\n// アクセスでのみ展開された更新が表示されます。\n\n// このモデルの利点とオプトイン方法の詳細については、\n// https://bit.ly/CRA-PWA をご覧ください。\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] は IPv6 localhost アドレスです。\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 は IPv4 のローカルホストと見なされます。\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // URLコンストラクターは、SWをサポートするすべてのブラウザーで使用できます。\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // PUBLIC_URL がページの配信元と異なる発信元にある場合サービスワーカーは機能しません。\n      // これは、アセットの提供にCDNが使用されている場合に発生する可能性があります。\n      // https://github.com/facebook/create-react-app/issues/2374 を参照してください\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // これはローカルホストで実行されています。 Service Workerがまだ存在するかどうかを確認しましょう。\n        checkValidServiceWorker(swUrl, config);\n\n        // いくつかの追加のログを localhost に追加し、開発者に\n        // service worker/PWA ドキュメントを参照させます。\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // ローカルホストではありません。サービスワーカーを登録するだけです。\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // この時点で更新された事前キャッシュされたコンテンツが取得されましたが、\n              // 以前のサービスワーカーは、すべてのクライアントタブが閉じられるまで\n              // 古いコンテンツを引き続き提供します。\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // コールバックを実行\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // この時点ですべてが事前にキャッシュされています。\n              // \"コンテンツはオフラインで使用するためにキャッシュされます。\"\n              // メッセージを表示するのに最適なタイミングです。\n              console.log('Content is cached for offline use.');\n\n              // コールバックを実行\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // ページをリロードできない場合、サービスワーカーが見つかるかどうかを確認します。\n  fetch(swUrl)\n    .then(response => {\n      // Service Worker が存在し、JSファイルを実際に取得していることを確認してください。\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // サービスワーカーが見つかりません。おそらく別のアプリ。ページをリロード。\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // サービスワーカーが見つかりました。通常どおり続行。\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\"use struct\";\n\nconst EventEmitter = require('events');\n\nconst Endpoint = 'https://api-gw98.herokuapp.com/https://techbookfest.org/api';\n\nconst BoothToken = /^(.+?)([0-9]+)(.*)$/; // 配置を、種別\b、番号、フロア に分割するための正規表現\n\nconst KeyLocalStorage = 'circle-cache';\n\n// 配置を順番に\nfunction booth2order(booth) {\n  const spaceToken = [].concat(BoothToken.exec(booth)||['',0,'']).slice(1);\n  const spaceCategory = spaceToken[0].codePointAt(0);\n  return (\n    0x3041 <= spaceCategory && spaceCategory <= 0x3093\n      ? spaceCategory - 0x3041 + 10\n      : ['運','協'].indexOf(spaceToken[0])\n  ) * 1000 + +spaceToken[1];\n}\n\nexport default class CircleModel {\n\n  constructor() {\n\n    // イベント通知\n    this._event = new EventEmitter();\n\n    // 保持している情報\n    this._store = Object.assign({\n      loadCompleted: false,\n      orderBy: {\n        booth: [], // 配置順\n      },\n      lookupBy: {\n        booth: {}, // 配置をキーにサークルIDを引く\n      },\n      circles: {}, // サークルIDをキーにして収納されたサークルの情報\n    }, JSON.parse(sessionStorage.getItem(KeyLocalStorage)) || {});\n\n    this._waitRequest = {};\n    this._waitRequestList = false;\n  }\n\n  _updateCache() {\n    const data = JSON.stringify(this._store);\n    console.debug('circle data len', data.length);\n    sessionStorage.setItem(KeyLocalStorage, data);\n  }\n\n  // サークルを要求\n  request(options) {\n    options = options || {};\n    options.circleId = options.circleId || null;\n\n    const eventId = 'tbf07';\n    let reqUrls = [];\n    let reqInfo = false;\n\n    if (options.circleId) { // 特定のサークルのみ取得\n      if (this._waitRequest[options.circleId]) { // 要求中なので何もしない\n        console.debug(`request wait for ${options.circleId}`);\n        return;\n      }\n      reqUrls.push(`${Endpoint}/circle/${options.circleId}`);\n      this._waitRequest[options.circleId] = true;\n      reqInfo = options.circleId;\n    }\n    else { // 全てのサークルを取得\n      if (0&&this._store.loadCompleted && !options.force) {\n        this._waitRequestList = false;\n        console.debug('circle list uses cache');\n        this._event.emit('change');\n        this._event.emit('loaded');\n        return;\n      }\n      this._waitRequestList = reqInfo = true;\n      this._store.loadCompleted = false;\n      this._updateCache();\n      reqUrls.push(`${Endpoint}/circle?eventID=${eventId}&eventExhibitCourseID=3&visibility=site&limit=100&onlyAdoption=true`);\n      //reqUrls.push(`${Endpoint}/circle?eventID=${eventId}&visibility=site&limit=100&onlyAdoption=true`);\n    }\n\n    // 情報を要求\n    const req = () => {\n      const reqUrl = reqUrls.shift();\n      if (!reqUrl) { // 取得完了\n        if (true === reqInfo) { //console.log('CircleModel request comp!');\n          this._waitRequestList = false;\n          this._store.loadCompleted = true;\n        }\n        else {\n          delete this._waitRequest[reqInfo];\n        }\n        this._updateCache();\n        this._event.emit('change');\n        this._event.emit('loaded');\n      }\n      else { // 取得継続中\n        fetch(reqUrl, {\n          method: 'GET'\n        }).then((res) => {\n          return res.json();\n        }).then((data) => {\n          if (data.cursor) { // 継続カーソルが存在するので次を追加\n            reqUrls.unshift(`${reqUrl.replace(/&cursor=.+$/,'')}&cursor=${data.cursor}`);\n          }\n\n          //console.log('CircleModel request',data);\n\n          if (!data.list) {\n            const circleInfo = data;\n            // サークル情報更新\n            delete circleInfo.event;\n            delete circleInfo.eventExhibitCourse;\n            this._store.circles[circleInfo.id] = circleInfo;\n            // 配置からサークルIdを引くための情報を更新\n            for (let j = 0, space; undefined !== (space = circleInfo.spaces[j]); ++j) {\n              this._store.lookupBy.booth[space] = circleInfo.id;\n              if (this._store.orderBy.booth.indexOf(space) < 0) {\n                this._store.orderBy.booth.push(space);\n              }\n            }\n          }\n          else {\n            for (let i = 0, circleInfo; undefined !== (circleInfo = data.list[i]); ++i) {\n              delete circleInfo.event;\n              delete circleInfo.eventExhibitCourse;\n              // サークル情報更新\n              this._store.circles[circleInfo.id] = circleInfo;\n              // 配置からサークルIdを引くための情報を更新\n              for (let j = 0, space; undefined !== (space = circleInfo.spaces[j]); ++j) {\n                this._store.lookupBy.booth[space] = circleInfo.id;\n                if (this._store.orderBy.booth.indexOf(space) < 0) {\n                  this._store.orderBy.booth.push(space);\n                }\n              }\n            }\n          }\n\n          this._store.orderBy.booth = this._store.orderBy.booth.sort((a, b) => {\n            // 運＜協＜あ〜\n            const spaceOrderA = booth2order(a);\n            const spaceOrderB = booth2order(b);\n            return spaceOrderA - spaceOrderB;\n          });\n          \n          this._updateCache();\n          this._event.emit('change');\n\n          // 次を要求\n          return req();\n        }).catch((err) => {\n          return console.error(err);\n        });\n      }\n    };\n\n    req();\n  }\n\n  // 通知を登録\n  on(name, listner) {\n    this._event.on(name, listner);\n    if (0 <= ['change','loaded'].indexOf(name) &&\n        false === this._waitRequestList) {\n      listner(name);\n    }\n  }\n\n  // 通知を解除\n  off(name, listner) {\n    this._event.removeListener(name, listner);\n  }\n\n  getCircleListOrderByBooth() {\n    return (this._store.orderBy.booth||[]).map((boothNo) => {\n      const circleInfo = this.getCircleByBooth(boothNo) || {};\n      return circleInfo.id;\n    });\n  }\n\n  // サークル情報を配置から取得\n  getCircleByBooth(boothNo) {\n    return this._store.circles[\n      this._store.lookupBy.booth[\n        boothNo\n      ]\n    ];\n  }\n\n  // サークル情報を配置から取得\n  getCircleBoothOrder(circleId) {\n    if (false !== this._waitRequestList) {\n      return -2;\n    }\n    return this._store.orderBy.booth.indexOf(((this._store.circles[circleId]||{}).spaces||[])[0]);\n  }\n\n  // サークルを取得\n  getCircle(circleId) {\n    return this._store.circles[circleId];\n  }\n\n  // 配置の一番最初を取得\n  getFirstBooth() {\n    return (\n      false === this._waitRequestList &&\n      this.getCircleByBooth(this._store.orderBy.booth[0])\n    );\n  }\n\n  // 配置の一番最後を取得\n  getLastBooth() {\n    return (\n      false === this._waitRequestList &&\n      this.getCircleByBooth(this._store.orderBy.booth[this._store.orderBy.booth.length - 1])\n    );\n  }\n\n  // 前のサークルがあるか？\n  hasPrevCircle(circleId) {\n    const circleInfo = this._store.circles[circleId];\n    return !!(circleInfo && circleInfo.prevCircleExhibitInfoID);\n  }\n\n  // 次のサークルがあるか？\n  hasNextCircle(circleId) {\n    const circleInfo = this._store.circles[circleId];\n    return !!(circleInfo && circleInfo.nextCircleExhibitInfoID);\n  }\n\n  // 前のサークルを取得\n  getPrevCircle(circleId) {\n    const circleInfo = this._store.circles[circleId];\n    return circleInfo && circleInfo.prevCircleExhibitInfoID && this._store.circles[circleInfo.prevCircleExhibitInfoID];\n  }\n\n  // 次のサークルを取得\n  getNextCircle(circleId) {\n    const circleInfo = this._store.circles[circleId];\n    return circleInfo && circleInfo.nextCircleExhibitInfoID && this._store.circles[circleInfo.nextCircleExhibitInfoID];\n  }\n\n  // 前のサークルを取得\n  getPrevCircleId(circleId) {\n    const circleInfo = this._store.circles[circleId];\n    return circleInfo && circleInfo.prevCircleExhibitInfoID;\n  }\n\n  // 次のサークルを取得\n  getNextCircleId(circleId) {\n    const circleInfo = this._store.circles[circleId];\n    return circleInfo && circleInfo.nextCircleExhibitInfoID;\n  }\n\n  mergeFavorite(favList) {\n    let reqList = {};\n    favList.forEach(favItem => {\n      if (favItem.circleId) {\n        const circleInfo = this._store.circles[favItem.circleId];\n        if (!circleInfo) {\n          reqList[favItem.circleId] = true;\n          return;\n        }\n        favItem.space       = circleInfo.spaces[0];\n        favItem.circleName  = circleInfo.name;\n      }\n    });\n    // 足りないものを要求\n    Object.keys(reqList).forEach((circleId) => {\n      this.request({ circleId });\n    });\n  }\n}\n","\"use struct\";\n\nconst EventEmitter = require('events');\n\nconst Endpoint = 'https://api-gw98.herokuapp.com/https://techbookfest.org/api';\n\nexport default class ProductModel {\n\n  constructor() {\n\n    // イベント通知\n    this._event = new EventEmitter();\n\n    // 保持している情報\n    this._store = {\n      orderBy: {\n        seq: {},\n      },\n      products: {}, // サークルIDをキーにして収納された本の情報\n    };\n    this._reqWait = {};\n  }\n\n  // 製品を要求\n  request(options) {\n    options = options || {};\n    options.circleId = options.circleId || null;\n\n    let reqUrls = [];\n    let reqCircleId = options.circleId;\n\n    if (options.circleId) {\n      if (this._reqWait[options.circleId]) {\n        return;\n      }\n      this._reqWait[options.circleId] = true;\n      reqUrls.push(`${Endpoint}/product?circleExhibitInfoID=${options.circleId}&limit=100`);\n    }\n    else {\n      return;\n    }\n\n    // 情報を要求\n    const req = () => {\n      const reqUrl = reqUrls.shift();\n      if (!reqUrl) { // 取得完了\n        delete this._reqWait[reqCircleId];\n        this._event.emit('change');\n        this._event.emit('loaded');\n      }\n      else { // 取得継続中\n        fetch(reqUrl, {\n          method: 'GET'\n        }).then((res) => {\n          return res.json();\n        }).then((data) => {\n          if (data.cursor) { // 継続カーソルが存在するので次を追加\n            reqUrls.unshift(`${reqUrl.replace(/&cursor=.+$/,'')}&cursor=${data.cursor}`);\n          }\n\n          //console.log('ProductModel request',data);\n\n          if (data.list) {\n            for (let i = 0, productInfo; undefined !== (productInfo = data.list[i]); ++i) {\n              // サークル情報更新\n              const circleId = productInfo.circleExhibitInfoID;\n              this._store.products[circleId] = this._store.products[circleId] || {};\n              this._store.products[circleId][productInfo.id] = productInfo;\n              this._store.orderBy.seq[circleId] = this._store.orderBy.seq[circleId] || [];\n              this._store.orderBy.seq[circleId][productInfo.seq-1] = productInfo.id;\n            }\n          }\n\n          this._event.emit('change');\n\n          // 次を要求\n          return req();\n        }).catch((err) => {\n          return console.error(err);\n        });\n      }\n    };\n\n    req();\n  }\n\n  // 通知を登録\n  on(name, listner) {\n    this._event.on(name, listner);\n  }\n\n  // 通知を解除\n  off(name, listner) {\n    this._event.removeListener(name, listner);\n  }\n\n  // 製品を取得\n  getProductOrder(circleId, productId) {\n    const orderBySeq = this._store.orderBy.seq[circleId] || [];\n    return orderBySeq ? orderBySeq.indexOf(productId) : -1;\n  }\n\n  // 製品を取得\n  getProductList(circleId) {\n    const products = this._store.products[circleId];\n    return products && Object.keys(products);\n  }\n\n  // 製品を取得\n  getProductByIndex(circleId, index) {\n    const products   = this._store.products[circleId] || {};\n    const orderBySeq = this._store.orderBy.seq[circleId] || [];\n    return products[orderBySeq[index]] || false;\n  }\n\n  // 製品を取得\n  getProduct(circleId, productId) {\n    const product = (this._store.products[circleId] || {})[productId] || false;\n    return product;\n  }\n\n  // 製品を取得\n  getProductCount(circleId) {\n    const orderBySeq = this._store.orderBy.seq[circleId];\n    return orderBySeq ? orderBySeq.length : -1;\n  }\n\n  // 次の製品を取得\n  hasNextProduct(circleId, productId) {\n    const orderBySeq = this._store.orderBy.seq[circleId];\n    const indexBySeq = orderBySeq && orderBySeq.indexOf(productId);\n    return !!(orderBySeq && orderBySeq[indexBySeq + 1]);\n  }\n\n  // 前の製品を取得\n  getPrevSiblings(circleId, productId) {\n    const products   = this._store.products[circleId];\n    const orderBySeq = this._store.orderBy.seq[circleId];\n    const indexBySeq = orderBySeq && orderBySeq.indexOf(productId);\n    return (orderBySeq && products[orderBySeq[indexBySeq - 1]]) || false;\n  }\n\n  // 次の製品を取得\n  getNextSiblings(circleId, productId) {\n    const products   = this._store.products[circleId];\n    const orderBySeq = this._store.orderBy.seq[circleId];\n    const indexBySeq = orderBySeq && orderBySeq.indexOf(productId);\n    return (orderBySeq && products[orderBySeq[indexBySeq + 1]]) || false;\n  }\n\n  mergeFavorite(favList) {\n    let reqList = {};\n    favList.forEach(favItem => {\n      if (favItem.circleId && favItem.productId) {\n        const productInfo = (this._store.products[favItem.circleId]||{})[favItem.productId];\n        if (!productInfo) {\n          reqList[favItem.circleId] = true;\n          return;\n        }\n        favItem.productName  = productInfo.name;\n        favItem.productPrice = productInfo.price;\n      }\n    });\n    // 足りないものを要求\n    Object.keys(reqList).forEach((circleId) => {\n      this.request({ circleId });\n    });\n  }\n}\n","\"use struct\";\n\nconst EventEmitter = require('events');\nconst FileDownload = require('js-file-download');\n\nconst KeyLocalStorage = 'favorite';\n\nconst eventId = 'tbf07';\n\nconst KeyCircle = 'circle';\n\nexport default class FavoriteModel {\n\n  constructor() {\n\n    // イベント通知\n    this._event = new EventEmitter();\n\n    // 保持している情報\n    this._store = JSON.parse(localStorage.getItem(KeyLocalStorage) || '{}');\n  }\n\n  // 通知を登録\n  on(name, listner) {\n    this._event.on(name, listner);\n  }\n\n  // 通知を解除\n  off(name, listner) {\n    this._event.removeListener(name, listner);\n  }\n\n  isFavorite(circleId, productId) {\n    return !!(productId\n      ? (this._store[eventId] && this._store[eventId][circleId] && this._store[eventId][circleId][productId])\n      : (this._store[eventId] && this._store[eventId][circleId] && this._store[eventId][circleId]['circle'])\n    );\n  }\n\n  setFavorite(circleId, productId) { //console.log('setFavorite', circleId, productId);\n    if (circleId) {\n      this._store[eventId] = this._store[eventId] || {};\n      this._store[eventId][circleId] = this._store[eventId][circleId] || { [KeyCircle]: null };\n      const key = productId ? productId : KeyCircle;\n      const updated = true !== this._store[eventId][circleId][key];\n      this._store[eventId][circleId][key] = true;\n      if (updated) {\n        localStorage.setItem(KeyLocalStorage, JSON.stringify(this._store));\n        this._event.emit('change', { circleId: circleId, productId: productId, favorite: true });\n      }\n    }\n  }\n\n  unsetFavorite(circleId, productId) { //console.log('unsetFavorite', circleId, productId);\n    if (circleId) {\n      this._store[eventId] = this._store[eventId] || {};\n      this._store[eventId][circleId] = this._store[eventId][circleId] || { [KeyCircle]: null };\n      const key = productId ? productId : KeyCircle;\n      const updated = true === this._store[eventId][circleId][key];\n      delete this._store[eventId][circleId][key];\n      if (updated) {\n        localStorage.setItem(KeyLocalStorage, JSON.stringify(this._store));\n        this._event.emit('change', { circleId: circleId, productId: productId, favorite: false });\n      }\n    }\n  }\n\n  export() {\n    FileDownload(JSON.stringify(this._store), 'favorite.json');\n  }\n\n  import(text) {\n    try {\n      let data = JSON.parse(text);\n      // ここで内容をチェック\n      this._store = data;\n      localStorage.setItem(KeyLocalStorage, JSON.stringify(this._store));\n      this._event.emit('change');\n      return true;\n    }\n    catch (e) {\n      console.debug(e);\n      return false;\n    }\n  }\n\n  list(eventId_) {\n\n    let favList = [];\n    let hasProduct = {};\n\n    // お気に入りの一覧を取得\n    const circleList = this._store[eventId_]||{};\n    for (let circleId in circleList) {\n      const productList = circleList[circleId]||{};\n      for (let productId in productList) {\n        if (productList[productId]) {\n          if (KeyCircle === productId) {\n            favList.push({ eventId: eventId, circleId: circleId });\n          }\n          else {\n            favList.push({ eventId: eventId, circleId: circleId, productId: productId });\n            hasProduct[circleId] = true;\n          }\n        }\n      }\n    }\n    // 頒布物をチェックしている場合はサークルのお気に入りをリストから除く\n    favList = favList.reduce((r, favItem) => {\n      if (favItem.productId ||\n          !hasProduct[favItem.circleId] ) {\n        r.push(favItem);\n      }\n      return r;\n    }, []);\n\n    return favList;\n  }\n\n}\n","\"use struct\";\n\nimport React from 'react';\n\nimport { Button } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Redirect } from \"react-router-dom\";\n\nfunction EventSelectView() {\n  return (\n    <div>\n      <Redirect to=\"/7/circle/\" />\n      <LinkContainer to=\"/7/circle/\">\n        <Button>技術書典７</Button>\n      </LinkContainer>\n    </div>\n  );\n}\n\nexport default EventSelectView;\n","\n\"use struct\";\n\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStar as faStarChecked } from '@fortawesome/free-solid-svg-icons'\nimport { faStar as faStarUnchecked } from '@fortawesome/free-regular-svg-icons'\n\n// 製品表示用\nfunction FavoriteStar({ models, circleId, productId, isCurrent }) {\n  const { favorite } = models;\n\n  const [ favorited,  setFavorited ] = useState(favorite.isFavorite(circleId, productId));\n\n  const setFavorite   = useCallback(() => favorite.setFavorite  (circleId, productId), [favorite, circleId, productId]);\n  const unsetFavorite = useCallback(() => favorite.unsetFavorite(circleId, productId), [favorite, circleId, productId]);\n\n  useEffect(() => {//console.log('CircleSelectView','useEffect');\n    const onFavoriteChange = (params) => {\n      if (!params) {\n        setFavorited(favorite.isFavorite(circleId, productId));\n      }\n      else {\n        if (circleId  === params.circleId &&\n            productId === params.productId) {\n          setFavorited(params.favorite);\n        }\n      }\n    };\n    // 通知先を登録\n    if (isCurrent) {\n      favorite.on('change',onFavoriteChange);\n      //console.log('fav on',[circleId, productId]);\n    }\n    // クリーンアップ関数を返す\n    return isCurrent ? (() => {\n      favorite.off('change',onFavoriteChange);\n      //console.log('fav off',[circleId, productId]);\n    }) : (() => {});\n  }, [isCurrent, favorite, circleId, productId]);\n\n  return (\n    <div style={{\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      padding: '.75rem',\n    }}\n    onClick={favorited ? unsetFavorite : setFavorite}\n    >\n      <FontAwesomeIcon\n        icon={favorited ? faStarChecked : faStarUnchecked}\n        color={\"#ffcc00\"}\n        size=\"lg\"\n        onClick={favorited ? unsetFavorite : setFavorite}\n      />\n    </div>\n  );\n}\n\nexport default FavoriteStar;\n","\"use struct\";\n\nimport React from 'react';\n\nimport Card from 'react-bootstrap/Card'\nimport Badge from 'react-bootstrap/Badge'\nimport Form from 'react-bootstrap/Form'\n\nimport FavoriteStar from './FavoriteStar'\n\n// サークル表示用\nfunction CircleCard({ models, circleInfo, isCurrent }) {\n  const circleCut = (circleInfo && circleInfo.circleCutImage) || { url: '', width: 0, height: 1 };\n  return (\n    <div className='circle-card'>\n      <Card >\n        <Card.Header>\n          <Badge variant=\"secondary\">{(circleInfo.spaces||[])[0]}</Badge>\n          {circleInfo.name||' '}\n          <FavoriteStar \n            key={`fav-${circleInfo && circleInfo.id}`}\n            models={models} isCurrent={isCurrent}\n            circleId={circleInfo && circleInfo.id} />\n        </Card.Header>\n        <div style={{ width: '100%', textAlign: 'center', marginTop: '8px' }} >\n          {circleCut.url && <Card.Img\n            variant=\"top\"\n            src={circleCut.url}\n            style={{\n              width:  circleCut.width * 200 / circleCut.height,\n              height: 200,\n            }}\n          />}\n          {!circleCut.url && <div\n            style={{\n              display: 'inline-block',\n              width:  141,\n              height: 200,\n              border: '5px solid black',\n              overflow: 'hidden'\n            }}\n          >\n            <div style={{ top: '50%', position: 'relative', marginTop: '-0.5em', }}>\n              NO IMAGE\n            </div>\n          </div>}\n        </div>\n        <Card.Body>\n          <div className='card-text'\n            // Card.Text だと \"<div> cannot appear as a descendant of <p>\" が出る\n          >\n            <Form>\n              <Form.Group controlId=\"name\">\n                <Form.Label>サークル名</Form.Label>\n                <div className='form-control-plaintext' >{!circleInfo.nameRuby?circleInfo.name:`${circleInfo.name}(${circleInfo.nameRuby})`}</div>\n              </Form.Group>\n              <Form.Group controlId=\"spaces\">\n                <Form.Label>配置</Form.Label>\n                <div className='form-control-plaintext' >{(circleInfo.spaces&&circleInfo.spaces[0])||''}</div>\n              </Form.Group>\n              <Form.Group controlId=\"penName\">\n                <Form.Label>ペンネーム</Form.Label>\n                <div className='form-control-plaintext' >{circleInfo.penName}</div>\n              </Form.Group>\n              {circleInfo.webSiteURL && <Form.Group controlId=\"webSiteURL\">\n                <Form.Label>Webサイト</Form.Label>\n                <div className='form-control-plaintext' >{circleInfo.webSiteURL}</div>\n              </Form.Group>}\n              <Form.Group controlId=\"genre\">\n                <Form.Label>ジャンル</Form.Label>\n                <div className='form-control-plaintext' >{circleInfo.genre}</div>\n              </Form.Group>\n              <Form.Group controlId=\"genreFreeFormat\">\n                <Form.Label>ジャンル詳細</Form.Label>\n                <pre className='form-control-plaintext' style={{ whiteSpace: 'pre-wrap' }} >{circleInfo.genreFreeFormat}</pre>\n              </Form.Group>\n            </Form>\n          </div>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nexport default CircleCard;\n","\"use struct\";\n\nimport React from 'react';\n\nimport Card from 'react-bootstrap/Card'\nimport Badge from 'react-bootstrap/Badge'\nimport Form from 'react-bootstrap/Form'\n\nimport FavoriteStar from './FavoriteStar'\n\nconst Type2Text = {\n  'fanzine':  '同人誌',\n  'commerce': '商業誌',\n};\n\nconst ImageSize = 200;\n\n// 製品表示用\nfunction ProductCard({ models, circleInfo, productInfo, isCurrent }) {\n  const firstImage = (productInfo && productInfo.images && productInfo.images[0]) || { url: '', width: 0, height: 1 };\n  return (\n    <div className='product-card'>\n      <Card >\n        <Card.Header>\n          <Badge variant=\"secondary\">{(circleInfo.spaces||[])[0]}</Badge>\n          {circleInfo.name||' '}\n          <FavoriteStar\n            key={`fav-${circleInfo && circleInfo.id}-${productInfo && productInfo.id}`}\n            models={models} isCurrent={isCurrent}\n            circleId={circleInfo && circleInfo.id} productId={productInfo && productInfo.id} />\n        </Card.Header>\n        {false&&<Card.Header>\n          {productInfo.name||' '}\n        </Card.Header>}\n        <div style={{ width: '100%', height: ImageSize, marginTop: '8px', display: 'flex', justifyContent: 'center', alignItems: 'center' }} >\n          {firstImage.url && <Card.Img\n            variant=\"top\"\n            src={firstImage.url}\n            style={Object.assign({\n            }, firstImage.width < firstImage.height ? {\n              width:  firstImage.width * ImageSize / firstImage.height,\n              height: ImageSize,\n            } : {\n              width:  ImageSize,\n              height: firstImage.height * ImageSize / firstImage.width,\n            })}\n          />}\n        </div>\n        <Card.Body>\n          <div className='card-text'\n            // Card.Text だと \"<div> cannot appear as a descendant of <p>\" が出る\n          >\n            <Form>\n            <Form.Group controlId=\"name\">\n                  <Form.Label>頒布物</Form.Label>\n                  <div className='form-control-plaintext' >{productInfo.name}</div>\n                </Form.Group>\n                <Form.Group controlId=\"page\">\n                  <Form.Label>種類 / ページ / 価格</Form.Label>\n                  <div className='form-control-plaintext' >{[\n                    Type2Text[productInfo.type],\n                    productInfo.page?`${productInfo.page} ページ`:`ページ数不明`,\n                    undefined !== productInfo.price?`${productInfo.price} 円`:'価格不明'\n                  ].join(' / ')}</div>\n                </Form.Group>\n                <Form.Group controlId=\"firstAppearanceEventName\">\n                  <Form.Label>初出</Form.Label>\n                  <div className='form-control-plaintext' >{productInfo.firstAppearanceEventName}</div>\n                </Form.Group>\n                <Form.Group controlId=\"description\">\n                  <Form.Label>概要</Form.Label>\n                  <pre className='form-control-plaintext' style={{ whiteSpace: 'pre-wrap' }} >{productInfo.description}</pre>\n                </Form.Group>\n              </Form>\n          </div>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nexport default ProductCard;\n","\"use struct\";\n\nimport React  from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\n\nexport default class HamburgerMenuButton extends React.Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    this.props.onClick(e);\n  }\n\n  render() {\n    return (\n      <a href=\"#\" onClick={this.handleClick}>\n        <FontAwesomeIcon icon={faBars} color={\"gray\"} size=\"2x\" />\n      </a>\n    );\n  }\n}","\"use struct\";\n\nimport React, { useEffect, useState, useCallback } from 'react';\n\nimport { Button, Spinner } from 'react-bootstrap';\nimport { Dropdown } from 'react-bootstrap';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faAngleLeft, faAngleRight, faAngleUp, faAngleDown } from '@fortawesome/free-solid-svg-icons'\n\nimport CircleCard from '../components/CircleCard'\nimport ProductCard from '../components/ProductCard'\nimport HamburgerMenuButton from '../components/HamburgerMenuButton'\n\nfunction CircleSelectView({ models, history, params }) {\n  const { circle, product, favorite } = models;\n  const { event, circleId, productId } = params;\n  //console.log('CircleSelectView',{models, history, params});\n\n  const [ circleList,  setCircleList  ] = useState();\n  const [ circleInfo,  setCircleInfo  ] = useState();\n  const [ productList, setProductList ] = useState();\n  const [ productInfo, setProductInfo ] = useState();\n\n  const handleFavoriteList = useCallback(() => {\n    history.push(`/fav/list`);\n  }, [history]);\n\n  const handleFavoriteSave = useCallback(() => {\n    favorite.export();\n  }, [favorite]);\n\n  const handleFavoriteLoad = useCallback(() => {\n    history.push(`/fav/import`);\n  }, [favorite, history]);\n\n  useEffect(() => {\n    const circleInfo_ = circle.getCircle(circleId);\n    circleInfo_ ? setCircleInfo(circleInfo_)\n                : circle.request({ circleId: circleId });\n    //\n    const productList_ = product.getProductList(circleId);\n    productList_ ? setProductList(productList)\n                 : product.request({ circleId: circleId });\n  }, [circle, circleId, product, productList]);\n\n  useEffect(() => {\n    if (circleId) {\n      const productInfo_ = product.getProduct(circleId, productId);\n      productInfo_ ? setProductInfo(productInfo_)\n                   : product.request({ circleId: circleId });\n    }\n  }, [circleId, product, productId]);\n\n  useEffect(() => {//console.log('CircleSelectView','useEffect');\n    const onCircleChange = () => {\n      //console.log('CircleSelectView','onCircleChange',circleId,circle.getCircle(circleId));\n      if (!circleId) {\n        // サークルを選択していない場合は一番初めのサークルの飛ぶ\n        const firstCircleInfo = circle.getFirstBooth();\n        if (firstCircleInfo) {\n          history.replace(`/${event}/circle/${firstCircleInfo.id}`);\n        }\n      }\n      else {\n        // 今のサークルを表示\n        setCircleList(circle.getCircleListOrderByBooth());\n        setCircleInfo(circle.getCircle(circleId));\n        setProductList(product.getProductList(circleId));\n        setProductInfo(product.getProduct(circleId, productId));\n      }\n    };\n    const onCircleLoaded = () => {\n      //console.log('CircleSelectView','onCircleLoaded',circleId,circle.getCircle(circleId));\n      // サークルの製品を取得\n        setCircleList(circle.getCircleListOrderByBooth());\n        setCircleInfo(circle.getCircle(circleId));\n        setProductList(product.getProductList(circleId));\n        setProductInfo(product.getProduct(circleId, productId));\n    };\n    const onProductChange = () => {\n      //console.log('CircleSelectView','onProductChange',circleId,productId,product.getProduct(circleId, productId));\n      setProductList(product.getProductList(circleId));\n      setProductInfo(product.getProduct(circleId, productId));\n    };\n    const onProductLoaded = () => {\n      //console.log('CircleSelectView','onProductLoaded',circleId,productId,product.getProduct(circleId, productId));\n      setProductList(product.getProductList(circleId));\n      setProductInfo(product.getProduct(circleId, productId));\n    };\n    // 通知先を登録\n    circle.on('change',onCircleChange);\n    circle.on('loaded',onCircleLoaded);\n    product.on('change',onProductChange);\n    product.on('loaded',onProductLoaded);\n    // クリーンアップ関数を返す\n    return () => {\n      circle.off('change',onCircleChange);\n      circle.off('loaded',onCircleLoaded);\n      product.off('change',onProductChange);\n      product.off('loaded',onProductLoaded);\n    };\n  }, [event, circle, product, circleId, productId, history]);\n\n  const circleInfo_  = circleInfo  || { id: circleId };\n  const productInfo_ = productInfo || { id: productId };\n\n  return (\n    <div className=\"card-container\">\n      {[\n        <div className=\"loading\">\n          <Spinner animation=\"border\" />\n        </div>,\n        <CircleCard\n          key={`_${circleId}`}\n          isCurrent={true}\n          models={models}\n          circleInfo={circleInfo_}\n        />,\n        <ProductCard\n          key={`_${circleId}_${productId}`}\n          isCurrent={true}\n          models={models}\n          circleInfo={circleInfo_}\n          productInfo={productInfo_}\n        />\n      ][\n        !circleInfo ? 0 : (!productInfo || !productInfo.name ? 1 : 2)\n      ]}\n\n      <Dropdown className='card-menu-btn'>\n        <Dropdown.Toggle as={HamburgerMenuButton} id=\"dropdown-custom-components\">\n          \n        </Dropdown.Toggle>\n\n        <Dropdown.Menu >\n          <Dropdown.Item eventKey=\"1\" onSelect={handleFavoriteList}>お気に入り一覧</Dropdown.Item>\n          <Dropdown.Divider />\n          <Dropdown.Item eventKey=\"2\" onSelect={handleFavoriteSave}>お気に入りをエクスポート</Dropdown.Item>\n          <Dropdown.Item eventKey=\"3\" onSelect={handleFavoriteLoad}>お気に入りをインポート</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n\n      <Button\n        variant=\"link\"\n        className={\"circle-prev\"+(circleInfo&&circle.hasPrevCircle(circleId)?'':' btn-hidden')}\n        onClick={() => {//console.log('ButtonBack');\n          const prevCircleId = circle.getPrevCircleId(circleId);\n          prevCircleId && history.push(`/${event}/circle/${prevCircleId}`);\n        }}\n      >\n        <FontAwesomeIcon icon={faAngleLeft} color={\"gray\"} size=\"3x\" />\n      </Button>\n\n      <Button\n        variant=\"link\"\n        className={\"circle-next\"+(circleInfo&&circle.hasNextCircle(circleId)?'':' btn-hidden')}\n        onClick={() => {//console.log('ButtonNext');\n          const nextCircleId = circle.getNextCircleId(circleId);\n          nextCircleId && history.push(`/${event}/circle/${nextCircleId}`);\n        }}\n      >\n        <FontAwesomeIcon icon={faAngleRight} color={\"gray\"} size=\"3x\" />\n      </Button>\n\n\n      <Button\n        variant=\"link\"\n        className={\"product-prev\"+(productId?'':' btn-hidden')}\n        onClick={() => {//console.log('ButtonTop');\n          const prevProduct = product.getPrevSiblings(circleId, productId);\n          history.push(\n            prevProduct\n              ? `/${event}/circle/${circleId}/${prevProduct.id}`\n              : `/${event}/circle/${circleId}`\n            );\n        }}\n      >\n        <FontAwesomeIcon icon={faAngleUp} color={\"gray\"} size=\"3x\" />\n      </Button>\n\n      <Button\n        variant=\"link\"\n        className={\"product-next\"+(product.hasNextProduct(circleId,productId)?'':' btn-hidden')}\n        onClick={() => {//console.log('ButtonButton');\n          const nextProduct = product.getNextSiblings(circleId, productId);\n          history.push(\n            nextProduct\n              ? `/${event}/circle/${circleId}/${nextProduct.id}`\n              : `/${event}/circle/${circleId}`\n            );\n        }}\n      >\n        <FontAwesomeIcon icon={faAngleDown} color={\"gray\"} size=\"3x\" />\n      </Button>\n\n    </div>\n  );\n}\n\nexport default CircleSelectView;\n","\n\"use struct\";\n\nimport React, { useEffect, useState, useCallback } from 'react';\n\nimport { Modal, Button } from 'react-bootstrap';\n\n// 製品表示用\nfunction MessageBox({ title, message, onClose }) {\n  const [show, setShow] = useState(!!message);\n\n  useEffect(() => {\n    setShow(!!message);\n  }, [message]);\n\n  const handleClose = useCallback(() => { setShow(false); onClose && onClose(); }, [onClose]);\n\n  return (\n    <>\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>{title}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{message}</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={handleClose}>\n            了解\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nexport default MessageBox;\n","\"use struct\";\n\nimport React, {useState, useCallback} from 'react'\n\nimport { ButtonToolbar, Button } from 'react-bootstrap';\n\nimport {useDropzone} from 'react-dropzone'\nimport 'react-dropzone/examples/theme.css';\n\nimport MessageBox from '../components/MessageBox';\n\nconst MsgImportSuccess = 'お気に入りのインポートに成功しました';\nconst MsgImportFailed  = 'お気に入りのインポートに失敗しました';\n\nfunction FavoriteImportView({ models, history }) {\n  const { favorite } = models;\n\n  const [ message, setMessage ] = useState(false);\n\n  const {\n    acceptedFiles,\n    rejectedFiles,\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    accept: 'application/json'\n  });\n\n  const rejectedFilesItems = rejectedFiles.map(file => (\n    <li key={file.path}>\n      {file.path} は利用できません。\n    </li>\n  ));\n\n  const handleImportClick = useCallback(() => {\n    if (acceptedFiles.length < 1) {\n      return;\n    }\n\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    \n    // ファイル情報をキャプチャ\n    reader.onload = (e) => {\n      if (!favorite.import(e.target.result)) {\n        setMessage(MsgImportFailed);\n      }\n      else {\n        setMessage(MsgImportSuccess);\n      }\n    };\n\n    // Read in the image file as a data URL.\n    reader.readAsText(file);\n\n  }, [acceptedFiles, favorite]);\n\n  const handleBackClick = useCallback(() => {\n    history.goBack();\n  }, [history]);\n\n  const handleMessageClose = useCallback(() => {\n    setMessage(false);\n  }, [history]);\n\n  // インポートに成功したので戻る\n  const handleMessageCloseWithBack = useCallback(() => {\n    setMessage(false);\n    history.goBack();\n  }, [history]);\n\n  return (\n      <div className='page-container'>\n        <h3>\n          お気に入りのインポート\n        </h3>\n        <div {...getRootProps({className: 'dropzone'})}>\n          <input {...getInputProps()} />\n          <p>ここでエクスポートしたお気に入りをドラッグ＆ドロップするか、クリックして選択してください</p>\n          <em>(*.json のみ指定可能)</em>\n        </div>\n        <ol>\n          {rejectedFilesItems}\n        </ol>\n        <ButtonToolbar>\n          <Button variant=\"primary\"   onClick={handleImportClick} disabled={acceptedFiles.length<1}>インポート</Button>\n          <Button variant=\"secondary\" onClick={handleBackClick}>戻る</Button>\n        </ButtonToolbar>\n        <MessageBox\n          title=\"インポート\"\n          message={message}\n          onClose={message === MsgImportSuccess ? handleMessageCloseWithBack : handleMessageClose}\n        />\n      </div>\n  );\n}\n\nexport default FavoriteImportView;\n","\"use struct\";\n\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport { ButtonToolbar, Button } from 'react-bootstrap';\n\nimport { Table } from 'react-bootstrap';\n\nfunction FavoriteListView({ history, models }) {\n  const { circle, product, favorite } = models;\n\n  const [ favList, setFavList ] = useState(favorite.list('tbf07'));\n  const [ priceTotal, setPriceTotal ] = useState({ price: 0, withUnknown: false });\n\n  useEffect(() => {//console.log('CircleSelectView','useEffect');\n    const updateFavList = () => {\n      let favList = favorite.list('tbf07');\n      circle.mergeFavorite(favList);\n      product.mergeFavorite(favList);\n      setFavList(favList);\n      setPriceTotal(favList.reduce((r, favItem) => {\n        if (favItem.productId) {\n          if (undefined === favItem.productPrice) {\n            r.withUnknown = true;\n          }\n          else {\n            r.price += favItem.productPrice;\n          }\n        }\n        return r;\n      }, { price: 0, withUnknown: false }));\n    };\n    // 通知先を登録\n    circle.on('change',updateFavList);\n    circle.on('loaded',updateFavList);\n    product.on('change',updateFavList);\n    product.on('loaded',updateFavList);\n    favorite.on('change',updateFavList);\n    return () => { // クリーンアップ関数を返す\n      circle.off('change',updateFavList);\n      circle.off('loaded',updateFavList);\n      product.off('change',updateFavList);\n      product.off('loaded',updateFavList);\n      favorite.off('change',updateFavList);\n    };\n  }, [favorite]);\n\n  const handleBackClick = useCallback(() => {\n    history.goBack();\n  }, [history]);\n\n  return (\n    <div className='page-container'>\n      <h3>\n        お気に入り一覧\n      </h3>\n      <Table striped bordered size=\"sm\">\n        <thead>\n          <tr>\n            <th>配置</th>\n            <th>サークル名</th>\n            <th>頒布物</th>\n            <th>価格</th>\n          </tr>\n        </thead>\n        <tbody>\n          {favList.map((favItem, index) => {\n            return (\n              <tr key={`fav-${favItem.circleId}-${favItem.productId|'circle'}`}>\n                <td style={{ wordBreak: 'keep-all' }}>\n                  <Button variant=\"link\" onClick={() => {\n                    if (favItem.productId) {\n                      history.push(`/${favItem.eventId.replace(/^[a-z]+0*/, '')}/circle/${favItem.circleId}/${favItem.productId}`);\n                    }\n                    else {\n                      history.push(`/${favItem.eventId.replace(/^[a-z]+0*/, '')}/circle/${favItem.circleId}`);\n                    }\n                  }} >\n                    {favItem.space||''}\n                  </Button>\n                </td>\n                <td>{favItem.circleName||''}</td>\n                <td>{favItem.productName||''}</td>\n                <td style={{ wordBreak: 'keep-all', textAlign: 'right' }}>{undefined===favItem.productPrice?'':`${favItem.productPrice} 円`}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n        <tfoot>\n          <tr>\n            <th>合計</th>\n            <td colSpan={3} style={{ textAlign: 'right' }}>{`${priceTotal.price} 円${priceTotal.withUnknown?' ※不明含む':''}`}</td>\n          </tr>\n        </tfoot>\n      </Table>\n      <ButtonToolbar>\n        <Button variant=\"secondary\" onClick={handleBackClick}>戻る</Button>\n      </ButtonToolbar>\n    </div>\n  );\n}\n\nexport default FavoriteListView;\n","\"use struct\";\n\nimport React from 'react';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport EventSelectView  from './views/EventSelect';\nimport CircleSelectView from './views/CircleSelect';\nimport FavoriteImportView from './views/FavoriteImport';\nimport FavoriteListView from './views/FavoriteList';\n\nfunction App({ models }) {\n  return (\n    <Router>\n      <Route\n        path=\"/\" exact\n        render={(router) => \n          <EventSelectView\n            models={models}\n            history={router.history}\n            params={router.match.params}\n          />}\n      />\n      <Route\n        path=\"/:event/circle/:circleId?/:productId?\"\n        render={(router) => \n          <CircleSelectView\n            models={models}\n            history={router.history}\n            params={router.match.params}\n          />}\n      />\n      <Route\n        path=\"/fav/import\"\n        render={(router) => \n          <FavoriteImportView\n            models={models}\n            history={router.history}\n          />}\n      />\n      <Route\n        path=\"/fav/list\"\n        render={(router) => \n          <FavoriteListView\n            models={models}\n            history={router.history}\n          />}\n      />\n    </Router>\n  );\n}\n\nexport default App;\n","\"use struct\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nimport CircleModel from './models/Circle';\nimport ProductModel from './models/Product';\nimport FavoriteModel from './models/Favorite';\n\nimport App from './App';\n\n\nconst models = {\n  circle:  new CircleModel(),\n  product: new ProductModel(),\n  favorite: new FavoriteModel(),\n};\n\nmodels.circle.request();\n\nReactDOM.render(\n  <App models={models} />,\n  document.getElementById('root')\n);\n\n// アプリをオフラインで動作させてより速くロードしたい場合は、以下で unregister() を\n// register() に変更できます。これにはいくつかの落とし穴があります。\n// サービスワーカーの詳細: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n\n// 要求スペック\n//   config#onUpdate(registration);\n//   config#onSuccess(registration);\n// serviceWorker.register(config);\n"],"sourceRoot":""}