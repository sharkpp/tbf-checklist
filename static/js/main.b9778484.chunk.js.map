{"version":3,"sources":["serviceWorker.js","models/Circle.js","models/Product.js","models/Favorite.js","views/EventSelect.js","components/EmptyCard.js","components/HamburgerMenuButton.js","views/CircleSelect.js","components/MessageBox.js","views/FavoriteImport.js","views/FavoriteList.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","EventEmitter","require","BoothToken","KeyLocalStorageOld","KeyLocalStoragePrefix","booth2order","booth","spaceToken","concat","exec","slice","spaceCategory","codePointAt","indexOf","CircleModel","this","_event","_waitRequest","_waitRequestList","_store","_getDefault","sessionStorage","removeItem","i","length","key","substr","circleInfo","JSON","parse","getItem","id","_updateCircle","e","orderBy","sort","a","b","loadCompleted","lookupBy","circles","noSave","event","eventExhibitCourse","space","j","undefined","spaces","push","setItem","stringify","options","name","listner","on","removeListener","map","boothNo","getCircleByBooth","circleId","prevCircleExhibitInfoID","nextCircleExhibitInfoID","favList","reqList","forEach","favItem","circleName","Object","keys","request","emit","ProductModel","_reqWait","productInfo","seq","products","circleExhibitInfoID","productId","orderBySeq","index","indexBySeq","productName","productPrice","price","FileDownload","KeyLocalStorage","FavoriteModel","localStorage","updated","favorite","text","data","console","debug","eventId_","hasProduct","circleList","productList","eventId","reduce","r","EventSelectView","to","Button","EmptyCard","className","Card","Header","HamburgerMenuButton","props","context","handleClick","bind","preventDefault","onClick","href","icon","faBars","color","size","React","Component","CircleSelectView","models","history","params","circle","product","useState","setCircleList","setCircleInfo","setProductList","setProductInfo","handleFavoriteList","useCallback","handleFavoriteSave","export","handleFavoriteLoad","handleClearCache","clearCache","useEffect","circleInfo_","getCircle","getProductList","productInfo_","getProduct","onCircleChange","getCircleListOrderByBooth","firstCircleInfo","getFirstBooth","replace","onCircleLoaded","onProductChange","onProductLoaded","off","Dropdown","Toggle","as","Menu","Item","eventKey","onSelect","Divider","disabled","MessageBox","title","message","onClose","show","setShow","handleClose","Modal","onHide","closeButton","Title","Body","Footer","variant","MsgImportSuccess","MsgImportFailed","FavoriteImportView","setMessage","useDropzone","accept","acceptedFiles","rejectedFiles","getRootProps","getInputProps","rejectedFilesItems","file","path","handleImportClick","reader","FileReader","onload","import","target","result","readAsText","handleBackClick","goBack","handleMessageCloseWithBack","ButtonToolbar","FavoriteListView","list","setFavList","withUnknown","priceTotal","setPriceTotal","updateFavList","mergeFavorite","Table","striped","bordered","style","padding","colSpan","App","exact","render","router","EventSelect","CircleSelect","FavoriteImport","FavoriteList","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9778484.chunk.js","sourcesContent":["\"use struct\";\n\n// このオプションのコードは、Service Workerを登録するために使用されます。\n// register() はデフォルトでは呼び出されません。\n\n// これにより、その後の実稼働時のアクセスでアプリの読み込みが速くなり、\n// オフライン機能が提供されます。 ただし、開発者（およびユーザー）は、\n// 以前にキャッシュされたリソースがバックグラウンドで更新されるため、\n// ページで開いている既存のタブがすべて閉じられた後、ページへの以降の\n// アクセスでのみ展開された更新が表示されます。\n\n// このモデルの利点とオプトイン方法の詳細については、\n// https://bit.ly/CRA-PWA をご覧ください。\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] は IPv6 localhost アドレスです。\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 は IPv4 のローカルホストと見なされます。\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // URLコンストラクターは、SWをサポートするすべてのブラウザーで使用できます。\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // PUBLIC_URL がページの配信元と異なる発信元にある場合サービスワーカーは機能しません。\n      // これは、アセットの提供にCDNが使用されている場合に発生する可能性があります。\n      // https://github.com/facebook/create-react-app/issues/2374 を参照してください\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // これはローカルホストで実行されています。 Service Workerがまだ存在するかどうかを確認しましょう。\n        checkValidServiceWorker(swUrl, config);\n\n        // いくつかの追加のログを localhost に追加し、開発者に\n        // service worker/PWA ドキュメントを参照させます。\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // ローカルホストではありません。サービスワーカーを登録するだけです。\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // この時点で更新された事前キャッシュされたコンテンツが取得されましたが、\n              // 以前のサービスワーカーは、すべてのクライアントタブが閉じられるまで\n              // 古いコンテンツを引き続き提供します。\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // コールバックを実行\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // この時点ですべてが事前にキャッシュされています。\n              // \"コンテンツはオフラインで使用するためにキャッシュされます。\"\n              // メッセージを表示するのに最適なタイミングです。\n              console.log('Content is cached for offline use.');\n\n              // コールバックを実行\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // ページをリロードできない場合、サービスワーカーが見つかるかどうかを確認します。\n  fetch(swUrl)\n    .then(response => {\n      // Service Worker が存在し、JSファイルを実際に取得していることを確認してください。\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // サービスワーカーが見つかりません。おそらく別のアプリ。ページをリロード。\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // サービスワーカーが見つかりました。通常どおり続行。\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\"use struct\";\n\nconst EventEmitter = require('events');\n\nconst BoothToken = /^(.+?)([0-9]+)(.*)$/; // 配置を、種別\b、番号、フロア に分割するための正規表現\n\nconst KeyLocalStorageOld = 'circle-cache';\nconst KeyLocalStoragePrefix = 'c:';\n\n// 配置を順番に\nfunction booth2order(booth) {\n  const spaceToken = [].concat(BoothToken.exec(booth)||['',0,'']).slice(1);\n  const spaceCategory = spaceToken[0].codePointAt(0);\n  return (\n    0x3041 <= spaceCategory && spaceCategory <= 0x3093\n      ? spaceCategory - 0x3041 + 10\n      : ['運','協'].indexOf(spaceToken[0])\n  ) * 1000 + +spaceToken[1];\n}\n\nexport default class CircleModel {\n\n  constructor() {\n\n    // イベント通知\n    this._event = new EventEmitter();\n\n    this._waitRequest = {};\n    this._waitRequestList = false;\n\n    // 保持している情報\n    this._store = this._getDefault();\n\n    // 古いキャッシュを削除\n    sessionStorage.removeItem(KeyLocalStorageOld);\n\n    // セッションからの復帰\n    for (let i = 0; i < sessionStorage.length; i++) {\n      try {\n        const key = sessionStorage.key(i);\n        if (KeyLocalStoragePrefix === key.substr(0, KeyLocalStoragePrefix.length)) {\n          let circleInfo = JSON.parse(sessionStorage.getItem(key));\n          if (circleInfo && circleInfo.id) {\n            this._updateCircle(circleInfo, true);\n          }\n        }\n      }\n      catch (e) {}\n    }\n    this._store.orderBy.booth = this._store.orderBy.booth.sort((a, b) => {\n      // 運＜協＜あ〜\n      const spaceOrderA = booth2order(a);\n      const spaceOrderB = booth2order(b);\n      return spaceOrderA - spaceOrderB;\n    });\n  }\n\n  _getDefault() {\n    return {\n      loadCompleted: false,\n      orderBy: {\n        booth: [], // 配置順\n      },\n      lookupBy: {\n        booth: {}, // 配置をキーにサークルIDを引く\n      },\n      circles: {}, // サークルIDをキーにして収納されたサークルの情報\n    };\n  }\n\n  _updateCircle(circleInfo, noSave) {\n    // サークル情報更新\n    delete circleInfo.event;\n    delete circleInfo.eventExhibitCourse;\n    this._store.circles[circleInfo.id] = circleInfo;\n    // 配置からサークルIdを引くための情報を更新\n    for (let j = 0, space; undefined !== (space = circleInfo.spaces[j]); ++j) {\n      this._store.lookupBy.booth[space] = circleInfo.id;\n      if (this._store.orderBy.booth.indexOf(space) < 0) {\n        this._store.orderBy.booth.push(space);\n      }\n    }\n    if (!noSave) {\n      sessionStorage.setItem(\n        KeyLocalStoragePrefix+circleInfo.id,\n        JSON.stringify(circleInfo)\n      );\n    }\n  }\n\n  // サークルを要求\n  request(options) {\n  }\n\n  // 通知を登録\n  on(name, listner) {\n    this._event.on(name, listner);\n    if (0 <= ['change','loaded'].indexOf(name) &&\n        false === this._waitRequestList) {\n      listner(name);\n    }\n  }\n\n  // 通知を解除\n  off(name, listner) {\n    this._event.removeListener(name, listner);\n  }\n\n  getCircleListOrderByBooth() {\n    return (this._store.orderBy.booth||[]).map((boothNo) => {\n      const circleInfo = this.getCircleByBooth(boothNo) || {};\n      return circleInfo.id;\n    });\n  }\n\n  // サークル情報を配置から取得\n  getCircleByBooth(boothNo) {\n    return this._store.circles[\n      this._store.lookupBy.booth[\n        boothNo\n      ]\n    ];\n  }\n\n  // サークル情報を配置から取得\n  getCircleBoothOrder(circleId) {\n    if (false !== this._waitRequestList) {\n      return -2;\n    }\n    return this._store.orderBy.booth.indexOf(((this._store.circles[circleId]||{}).spaces||[])[0]);\n  }\n\n  // サークルを取得\n  getCircle(circleId) {\n    return this._store.circles[circleId];\n  }\n\n  // 配置の一番最初を取得\n  getFirstBooth() {\n    return (\n      false === this._waitRequestList &&\n      this.getCircleByBooth(this._store.orderBy.booth[0])\n    );\n  }\n\n  // 配置の一番最後を取得\n  getLastBooth() {\n    return (\n      false === this._waitRequestList &&\n      this.getCircleByBooth(this._store.orderBy.booth[this._store.orderBy.booth.length - 1])\n    );\n  }\n\n  // 前のサークルがあるか？\n  hasPrevCircle(circleId) {\n    const circleInfo = this._store.circles[circleId];\n    return !!(circleInfo && circleInfo.prevCircleExhibitInfoID);\n  }\n\n  // 次のサークルがあるか？\n  hasNextCircle(circleId) {\n    const circleInfo = this._store.circles[circleId];\n    return !!(circleInfo && circleInfo.nextCircleExhibitInfoID);\n  }\n\n  // 前のサークルを取得\n  getPrevCircle(circleId) {\n    const circleInfo = this._store.circles[circleId];\n    return circleInfo && circleInfo.prevCircleExhibitInfoID && this._store.circles[circleInfo.prevCircleExhibitInfoID];\n  }\n\n  // 次のサークルを取得\n  getNextCircle(circleId) {\n    const circleInfo = this._store.circles[circleId];\n    return circleInfo && circleInfo.nextCircleExhibitInfoID && this._store.circles[circleInfo.nextCircleExhibitInfoID];\n  }\n\n  // 前のサークルを取得\n  getPrevCircleId(circleId) {\n    const circleInfo = this._store.circles[circleId];\n    return circleInfo && circleInfo.prevCircleExhibitInfoID;\n  }\n\n  // 次のサークルを取得\n  getNextCircleId(circleId) {\n    const circleInfo = this._store.circles[circleId];\n    return circleInfo && circleInfo.nextCircleExhibitInfoID;\n  }\n\n  mergeFavorite(favList) {\n    let reqList = {};\n    favList.forEach(favItem => {\n      if (favItem.circleId) {\n        const circleInfo = this._store.circles[favItem.circleId];\n        if (!circleInfo) {\n          favItem.circleName  = favItem.circleId;\n            reqList[favItem.circleId] = true;\n          return;\n        }\n        favItem.space       = circleInfo.spaces[0];\n        favItem.circleName  = circleInfo.name;\n      }\n    });\n    // 足りないものを要求\n    Object.keys(reqList).forEach((circleId) => {\n      this.request({ circleId });\n    });\n  }\n\n  clearCache() {\n    for (let i = 0; i < sessionStorage.length; i++) {\n      const key = sessionStorage.key(i);\n      if (KeyLocalStoragePrefix === key.substr(0, KeyLocalStoragePrefix.length)) {\n        sessionStorage.removeItem(key);\n      }\n    }\n    this._store = this._getDefault();\n    this._event.emit('change');\n  }\n}\n","\"use struct\";\n\nconst EventEmitter = require('events');\n\nconst KeyLocalStoragePrefix = 'p:';\n\nexport default class ProductModel {\n\n  constructor() {\n\n    // イベント通知\n    this._event = new EventEmitter();\n\n    // 保持している情報\n    this._store = this._getDefault();\n    this._reqWait = {};\n\n    // セッションからの復帰\n    for (let i = 0; i < sessionStorage.length; i++) {\n      try {\n        const key = sessionStorage.key(i);\n        if (KeyLocalStoragePrefix === key.substr(0, KeyLocalStoragePrefix.length)) {\n          let productInfo = JSON.parse(sessionStorage.getItem(key));\n          if (productInfo && productInfo.id) {\n            this._updateCircle(productInfo, true);\n          }\n        }\n      }\n      catch (e) {}\n    }\n  }\n\n  // 製品を要求\n  request(options) {\n  }\n\n  _getDefault() {\n    return {\n      orderBy: {\n        seq: {},\n      },\n      products: {}, // サークルIDをキーにして収納された本の情報\n    };\n  }\n\n  _updateCircle(productInfo, noSave) {\n    // サークル情報更新\n    const circleId = productInfo.circleExhibitInfoID;\n    this._store.products[circleId] = this._store.products[circleId] || {};\n    this._store.products[circleId][productInfo.id] = productInfo;\n    this._store.orderBy.seq[circleId] = this._store.orderBy.seq[circleId] || [];\n    this._store.orderBy.seq[circleId][productInfo.seq-1] = productInfo.id;\n    if (!noSave) {\n      sessionStorage.setItem(\n        KeyLocalStoragePrefix+productInfo.id,\n        JSON.stringify(productInfo)\n      );\n    }\n  }\n\n  // 通知を登録\n  on(name, listner) {\n    this._event.on(name, listner);\n  }\n\n  // 通知を解除\n  off(name, listner) {\n    this._event.removeListener(name, listner);\n  }\n\n  // 製品を取得\n  getProductOrder(circleId, productId) {\n    const orderBySeq = this._store.orderBy.seq[circleId] || [];\n    return orderBySeq ? orderBySeq.indexOf(productId) : -1;\n  }\n\n  // 製品を取得\n  getProductList(circleId) {\n    const products = this._store.products[circleId];\n    return products && Object.keys(products);\n  }\n\n  // 製品を取得\n  getProductByIndex(circleId, index) {\n    const products   = this._store.products[circleId] || {};\n    const orderBySeq = this._store.orderBy.seq[circleId] || [];\n    return products[orderBySeq[index]] || false;\n  }\n\n  // 製品を取得\n  getProduct(circleId, productId) {\n    const product = (this._store.products[circleId] || {})[productId] || false;\n    return product;\n  }\n\n  // 製品を取得\n  getProductCount(circleId) {\n    const orderBySeq = this._store.orderBy.seq[circleId];\n    return orderBySeq ? orderBySeq.length : -1;\n  }\n\n  // 次の製品を取得\n  hasNextProduct(circleId, productId) {\n    const orderBySeq = this._store.orderBy.seq[circleId];\n    const indexBySeq = orderBySeq && orderBySeq.indexOf(productId);\n    return !!(orderBySeq && orderBySeq[indexBySeq + 1]);\n  }\n\n  // 前の製品を取得\n  getPrevSiblings(circleId, productId) {\n    const products   = this._store.products[circleId];\n    const orderBySeq = this._store.orderBy.seq[circleId];\n    const indexBySeq = orderBySeq && orderBySeq.indexOf(productId);\n    return (orderBySeq && products[orderBySeq[indexBySeq - 1]]) || false;\n  }\n\n  // 次の製品を取得\n  getNextSiblings(circleId, productId) {\n    const products   = this._store.products[circleId];\n    const orderBySeq = this._store.orderBy.seq[circleId];\n    const indexBySeq = orderBySeq && orderBySeq.indexOf(productId);\n    return (orderBySeq && products[orderBySeq[indexBySeq + 1]]) || false;\n  }\n\n  mergeFavorite(favList) {\n    let reqList = {};\n    favList.forEach(favItem => {\n      if (favItem.circleId && favItem.productId) {\n        const productInfo = (this._store.products[favItem.circleId]||{})[favItem.productId];\n        if (!productInfo) {\n          favItem.productName = favItem.productId;\n          reqList[favItem.circleId] = true;\n          return;\n        }\n        favItem.productName  = productInfo.name;\n        favItem.productPrice = productInfo.price;\n      }\n    });\n    // 足りないものを要求\n    Object.keys(reqList).forEach((circleId) => {\n      this.request({ circleId });\n    });\n  }\n\n  clearCache() {\n    for (let i = 0; i < sessionStorage.length; i++) {\n      const key = sessionStorage.key(i);\n      if (KeyLocalStoragePrefix === key.substr(0, KeyLocalStoragePrefix.length)) {\n        sessionStorage.removeItem(key);\n      }\n    }\n    this._store = this._getDefault();\n    this._event.emit('change');\n  }\n}\n","\"use struct\";\n\nconst EventEmitter = require('events');\nconst FileDownload = require('js-file-download');\n\nconst KeyLocalStorage = 'favorite';\n\nconst eventId = 'tbf07';\n\nconst KeyCircle = 'circle';\n\nexport default class FavoriteModel {\n\n  constructor() {\n\n    // イベント通知\n    this._event = new EventEmitter();\n\n    // 保持している情報\n    this._store = JSON.parse(localStorage.getItem(KeyLocalStorage) || '{}');\n  }\n\n  // 通知を登録\n  on(name, listner) {\n    this._event.on(name, listner);\n  }\n\n  // 通知を解除\n  off(name, listner) {\n    this._event.removeListener(name, listner);\n  }\n\n  isFavorite(circleId, productId) {\n    return !!(productId\n      ? (this._store[eventId] && this._store[eventId][circleId] && this._store[eventId][circleId][productId])\n      : (this._store[eventId] && this._store[eventId][circleId] && this._store[eventId][circleId]['circle'])\n    );\n  }\n\n  setFavorite(circleId, productId) { //console.log('setFavorite', circleId, productId);\n    if (circleId) {\n      this._store[eventId] = this._store[eventId] || {};\n      this._store[eventId][circleId] = this._store[eventId][circleId] || { [KeyCircle]: null };\n      const key = productId ? productId : KeyCircle;\n      const updated = true !== this._store[eventId][circleId][key];\n      this._store[eventId][circleId][key] = true;\n      if (updated) {\n        localStorage.setItem(KeyLocalStorage, JSON.stringify(this._store));\n        this._event.emit('change', { circleId: circleId, productId: productId, favorite: true });\n      }\n    }\n  }\n\n  unsetFavorite(circleId, productId) { //console.log('unsetFavorite', circleId, productId);\n    if (circleId) {\n      this._store[eventId] = this._store[eventId] || {};\n      this._store[eventId][circleId] = this._store[eventId][circleId] || { [KeyCircle]: null };\n      const key = productId ? productId : KeyCircle;\n      const updated = true === this._store[eventId][circleId][key];\n      delete this._store[eventId][circleId][key];\n      if (updated) {\n        localStorage.setItem(KeyLocalStorage, JSON.stringify(this._store));\n        this._event.emit('change', { circleId: circleId, productId: productId, favorite: false });\n      }\n    }\n  }\n\n  export() {\n    FileDownload(JSON.stringify(this._store), 'favorite.json');\n  }\n\n  import(text) {\n    try {\n      let data = JSON.parse(text);\n      // ここで内容をチェック\n      this._store = data;\n      localStorage.setItem(KeyLocalStorage, JSON.stringify(this._store));\n      this._event.emit('change');\n      return true;\n    }\n    catch (e) {\n      console.debug(e);\n      return false;\n    }\n  }\n\n  list(eventId_) {\n\n    let favList = [];\n    let hasProduct = {};\n\n    // お気に入りの一覧を取得\n    const circleList = this._store[eventId_]||{};\n    for (let circleId in circleList) {\n      const productList = circleList[circleId]||{};\n      for (let productId in productList) {\n        if (productList[productId]) {\n          if (KeyCircle === productId) {\n            favList.push({ eventId: eventId, circleId: circleId });\n          }\n          else {\n            favList.push({ eventId: eventId, circleId: circleId, productId: productId });\n            hasProduct[circleId] = true;\n          }\n        }\n      }\n    }\n    // 頒布物をチェックしている場合はサークルのお気に入りをリストから除く\n    favList = favList.reduce((r, favItem) => {\n      if (favItem.productId ||\n          !hasProduct[favItem.circleId] ) {\n        r.push(favItem);\n      }\n      return r;\n    }, []);\n\n    return favList;\n  }\n\n}\n","\"use struct\";\n\nimport React from 'react';\n\nimport { Button } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Redirect } from \"react-router-dom\";\n\nfunction EventSelectView() {\n  return (\n    <div>\n      <Redirect to=\"/7/circle/\" />\n      <LinkContainer to=\"/7/circle/\">\n        <Button>技術書典７</Button>\n      </LinkContainer>\n    </div>\n  );\n}\n\nexport default EventSelectView;\n","\"use struct\";\n\nimport React from 'react';\n\nimport { Card, Spinner } from 'react-bootstrap';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar as faStarUnchecked } from '@fortawesome/free-regular-svg-icons';\nimport { faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons';\n\n\n// サークル表示用\nfunction EmptyCard() {\n  return (\n    <div className='circle-card'>\n      <Card >\n        <Card.Header>\n          閉鎖されました\n        </Card.Header>\n        <div className=\"loading\">\n          <p>諸事情によりこのサイトは閉鎖されました。</p>\n          <p>メニューより、お気に入り一覧の表示、エクスポートのみ可能です。</p>\n          <p>サークル名などはキャッシュに残っている場合にのみ表示されます。</p>\n          <p>ご迷惑をおかけいたしますが、ご理解の程よろしくお願い申し上げます。</p>\n        </div>\n      </Card>\n    </div>\n  );\n}\n\nexport default EmptyCard;\n","\"use struct\";\n\nimport React  from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\n\nexport default class HamburgerMenuButton extends React.Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    this.props.onClick(e);\n  }\n\n  render() {\n    return (\n      <a href=\"#\" onClick={this.handleClick}>\n        <FontAwesomeIcon icon={faBars} color={\"gray\"} size=\"2x\" />\n      </a>\n    );\n  }\n}","\"use struct\";\n\nimport React, { useEffect, useState, useCallback } from 'react';\n\nimport { Button } from 'react-bootstrap';\nimport { Dropdown } from 'react-bootstrap';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faAngleLeft, faAngleRight, faAngleUp, faAngleDown } from '@fortawesome/free-solid-svg-icons'\n\nimport EmptyCard from '../components/EmptyCard'\nimport HamburgerMenuButton from '../components/HamburgerMenuButton'\n\nfunction CircleSelectView({ models, history, params }) {\n  const { circle, product, favorite } = models;\n  const { event, circleId, productId } = params;\n  //console.log('CircleSelectView',{models, history, params});\n\n  const [ circleList,  setCircleList  ] = useState();\n  const [ circleInfo,  setCircleInfo  ] = useState();\n  const [ productList, setProductList ] = useState();\n  const [ productInfo, setProductInfo ] = useState();\n\n  const handleFavoriteList = useCallback(() => {\n    history.push(`/fav/list`);\n  }, [history]);\n\n  const handleFavoriteSave = useCallback(() => {\n    favorite.export();\n  }, [favorite]);\n\n  const handleFavoriteLoad = useCallback(() => {\n    history.push(`/fav/import`);\n  }, [favorite, history]);\n\n  const handleClearCache = useCallback(() => {\n    circle.clearCache();\n    product.clearCache();\n  }, [circle, product]);\n\n  useEffect(() => {\n    const circleInfo_ = circle.getCircle(circleId);\n    circleInfo_ ? setCircleInfo(circleInfo_)\n                : circle.request({ circleId: circleId });\n    //\n    const productList_ = product.getProductList(circleId);\n    productList_ ? setProductList(productList)\n                 : product.request({ circleId: circleId });\n  }, [circle, circleId, product, productList]);\n\n  useEffect(() => {\n    if (circleId) {\n      const productInfo_ = product.getProduct(circleId, productId);\n      productInfo_ ? setProductInfo(productInfo_)\n                   : product.request({ circleId: circleId });\n    }\n  }, [circleId, product, productId]);\n\n  useEffect(() => {//console.log('CircleSelectView','useEffect');\n    const onCircleChange = () => {\n      //console.log('CircleSelectView','onCircleChange',circleId,circle.getCircle(circleId));\n      if (!circleId) {\n        // サークルを選択していない場合は一番初めのサークルの飛ぶ\n        const firstCircleInfo = circle.getFirstBooth();\n        if (firstCircleInfo) {\n          history.replace(`/${event}/circle/${firstCircleInfo.id}`);\n        }\n      }\n      else {\n        // 今のサークルを表示\n        setCircleList(circle.getCircleListOrderByBooth());\n        setCircleInfo(circle.getCircle(circleId));\n        setProductList(product.getProductList(circleId));\n        setProductInfo(product.getProduct(circleId, productId));\n      }\n    };\n    const onCircleLoaded = () => {\n      //console.log('CircleSelectView','onCircleLoaded',circleId,circle.getCircle(circleId));\n      // サークルの製品を取得\n        setCircleList(circle.getCircleListOrderByBooth());\n        setCircleInfo(circle.getCircle(circleId));\n        setProductList(product.getProductList(circleId));\n        setProductInfo(product.getProduct(circleId, productId));\n    };\n    const onProductChange = () => {\n      //console.log('CircleSelectView','onProductChange',circleId,productId,product.getProduct(circleId, productId));\n      setProductList(product.getProductList(circleId));\n      setProductInfo(product.getProduct(circleId, productId));\n    };\n    const onProductLoaded = () => {\n      //console.log('CircleSelectView','onProductLoaded',circleId,productId,product.getProduct(circleId, productId));\n      setProductList(product.getProductList(circleId));\n      setProductInfo(product.getProduct(circleId, productId));\n    };\n    // 通知先を登録\n    circle.on('change',onCircleChange);\n    circle.on('loaded',onCircleLoaded);\n    product.on('change',onProductChange);\n    product.on('loaded',onProductLoaded);\n    // クリーンアップ関数を返す\n    return () => {\n      circle.off('change',onCircleChange);\n      circle.off('loaded',onCircleLoaded);\n      product.off('change',onProductChange);\n      product.off('loaded',onProductLoaded);\n    };\n  }, [event, circle, product, circleId, productId, history]);\n\n  const circleInfo_  = circleInfo  || { id: circleId };\n  const productInfo_ = productInfo || { id: productId };\n\n  return (\n    <div className=\"card-container\">\n      <EmptyCard />\n\n      <Dropdown className='card-menu-btn'>\n        <Dropdown.Toggle as={HamburgerMenuButton} id=\"dropdown-custom-components\">\n          \n        </Dropdown.Toggle>\n\n        <Dropdown.Menu >\n          <Dropdown.Item eventKey=\"1\" onSelect={handleFavoriteList}>お気に入り一覧</Dropdown.Item>\n          <Dropdown.Divider />\n          <Dropdown.Item eventKey=\"2\" onSelect={handleFavoriteSave}>お気に入りをエクスポート</Dropdown.Item>\n          <Dropdown.Item eventKey=\"3\" onSelect={handleFavoriteLoad} disabled>お気に入りをインポート</Dropdown.Item>\n          <Dropdown.Divider />\n          <Dropdown.Item eventKey=\"3\" onSelect={handleClearCache}>キャッシュをクリア</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n\n\n    </div>\n  );\n}\n\nexport default CircleSelectView;\n","\n\"use struct\";\n\nimport React, { useEffect, useState, useCallback } from 'react';\n\nimport { Modal, Button } from 'react-bootstrap';\n\n// 製品表示用\nfunction MessageBox({ title, message, onClose }) {\n  const [show, setShow] = useState(!!message);\n\n  useEffect(() => {\n    setShow(!!message);\n  }, [message]);\n\n  const handleClose = useCallback(() => { setShow(false); onClose && onClose(); }, [onClose]);\n\n  return (\n    <>\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>{title}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{message}</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={handleClose}>\n            了解\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nexport default MessageBox;\n","\"use struct\";\n\nimport React, {useState, useCallback} from 'react'\n\nimport { ButtonToolbar, Button } from 'react-bootstrap';\n\nimport {useDropzone} from 'react-dropzone'\nimport 'react-dropzone/examples/theme.css';\n\nimport MessageBox from '../components/MessageBox';\n\nconst MsgImportSuccess = 'お気に入りのインポートに成功しました';\nconst MsgImportFailed  = 'お気に入りのインポートに失敗しました';\n\nfunction FavoriteImportView({ models, history }) {\n  const { favorite } = models;\n\n  const [ message, setMessage ] = useState(false);\n\n  const {\n    acceptedFiles,\n    rejectedFiles,\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    accept: 'application/json'\n  });\n\n  const rejectedFilesItems = rejectedFiles.map(file => (\n    <li key={file.path}>\n      {file.path} は利用できません。\n    </li>\n  ));\n\n  const handleImportClick = useCallback(() => {\n    if (acceptedFiles.length < 1) {\n      return;\n    }\n\n    const file = acceptedFiles[0];\n    const reader = new FileReader();\n    \n    // ファイル情報をキャプチャ\n    reader.onload = (e) => {\n      if (!favorite.import(e.target.result)) {\n        setMessage(MsgImportFailed);\n      }\n      else {\n        setMessage(MsgImportSuccess);\n      }\n    };\n\n    // Read in the image file as a data URL.\n    reader.readAsText(file);\n\n  }, [acceptedFiles, favorite]);\n\n  const handleBackClick = useCallback(() => {\n    history.goBack();\n  }, [history]);\n\n  const handleMessageClose = () => {\n    setMessage(false);\n  };\n\n  // インポートに成功したので戻る\n  const handleMessageCloseWithBack = useCallback(() => {\n    setMessage(false);\n    history.goBack();\n  }, [history]);\n\n  return (\n      <div className='page-container'>\n        <h3>\n          お気に入りのインポート\n        </h3>\n        <div {...getRootProps({className: 'dropzone'})}>\n          <input {...getInputProps()} />\n          <p>ここでエクスポートしたお気に入りをドラッグ＆ドロップするか、クリックして選択してください</p>\n          <em>(*.json のみ指定可能)</em>\n        </div>\n        <ol>\n          {rejectedFilesItems}\n        </ol>\n        <ButtonToolbar>\n          <Button variant=\"primary\"   onClick={handleImportClick} disabled={acceptedFiles.length<1}>インポート</Button>\n          <Button variant=\"secondary\" onClick={handleBackClick}>戻る</Button>\n        </ButtonToolbar>\n        <MessageBox\n          title=\"インポート\"\n          message={message}\n          onClose={message === MsgImportSuccess ? handleMessageCloseWithBack : handleMessageClose}\n        />\n      </div>\n  );\n}\n\nexport default FavoriteImportView;\n","\"use struct\";\n\nimport React, { useState, useEffect, useCallback } from 'react';\n\nimport { ButtonToolbar, Button } from 'react-bootstrap';\n\nimport { Table } from 'react-bootstrap';\n\nfunction FavoriteListView({ history, models }) {\n  const { circle, product, favorite } = models;\n\n  const [ favList, setFavList ] = useState(favorite.list('tbf07'));\n  const [ priceTotal, setPriceTotal ] = useState({ price: 0, withUnknown: false });\n\n  useEffect(() => {//console.log('CircleSelectView','useEffect');\n    const updateFavList = () => {\n      let favList = favorite.list('tbf07');\n      circle.mergeFavorite(favList);\n      product.mergeFavorite(favList);\n      setFavList(favList);\n      setPriceTotal(favList.reduce((r, favItem) => {\n        if (favItem.productId) {\n          if (undefined === favItem.productPrice) {\n            r.withUnknown = true;\n          }\n          else {\n            r.price += favItem.productPrice;\n          }\n        }\n        return r;\n      }, { price: 0, withUnknown: false }));\n    };\n    // 通知先を登録\n    circle.on('change',updateFavList);\n    circle.on('loaded',updateFavList);\n    product.on('change',updateFavList);\n    product.on('loaded',updateFavList);\n    favorite.on('change',updateFavList);\n    return () => { // クリーンアップ関数を返す\n      circle.off('change',updateFavList);\n      circle.off('loaded',updateFavList);\n      product.off('change',updateFavList);\n      product.off('loaded',updateFavList);\n      favorite.off('change',updateFavList);\n    };\n  }, [circle,product,favorite]);\n\n  const handleBackClick = useCallback(() => {\n    history.goBack();\n  }, [history]);\n\n  return (\n    <div className='page-container'>\n      <h3>\n        お気に入り一覧\n      </h3>\n      <Table className='fav-list' striped bordered size=\"sm\">\n        <thead>\n          <tr>\n            <th className='circle-space'>配置</th>\n            <th className='circle-name'>サークル名</th>\n            <th className='product-name'>頒布物</th>\n            <th className='product-price'>価格</th>\n          </tr>\n        </thead>\n        <tbody>\n          {favList.map((favItem, index) => {\n            return (\n              <tr key={`fav-${favItem.circleId}-${favItem.productId|'circle'}`}>\n                <td className='circle-space' >\n                  <Button variant=\"link\" style={{ padding: 0 }} onClick={() => {\n                    if (favItem.productId) {\n                      history.push(`/${favItem.eventId.replace(/^[a-z]+0*/, '')}/circle/${favItem.circleId}/${favItem.productId}`);\n                    }\n                    else {\n                      history.push(`/${favItem.eventId.replace(/^[a-z]+0*/, '')}/circle/${favItem.circleId}`);\n                    }\n                  }} >\n                    {favItem.space||''}\n                  </Button>\n                </td>\n                <td className='circle-name'>{favItem.circleName||''}</td>\n                <td className='product-name'>{favItem.productName||''}</td>\n                <td className='product-price' >{undefined===favItem.productPrice?'':`${favItem.productPrice} 円`}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n        <tfoot>\n          <tr>\n            <th className='circle-space' >合計</th>\n            <td colSpan={3} className='product-price' >{`${priceTotal.price} 円${priceTotal.withUnknown?' ※不明含む':''}`}</td>\n          </tr>\n        </tfoot>\n      </Table>\n      <ButtonToolbar>\n        <Button variant=\"secondary\" onClick={handleBackClick}>戻る</Button>\n      </ButtonToolbar>\n    </div>\n  );\n}\n\nexport default FavoriteListView;\n","\"use struct\";\n\nimport React from 'react';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport EventSelectView  from './views/EventSelect';\nimport CircleSelectView from './views/CircleSelect';\nimport FavoriteImportView from './views/FavoriteImport';\nimport FavoriteListView from './views/FavoriteList';\n\nfunction App({ models }) {\n  return (\n    <Router>\n      <Route\n        path=\"/\" exact\n        render={(router) => \n          <EventSelectView\n            models={models}\n            history={router.history}\n            params={router.match.params}\n          />}\n      />\n      <Route\n        path=\"/:event/circle/:circleId?/:productId?\"\n        render={(router) => \n          <CircleSelectView\n            models={models}\n            history={router.history}\n            params={router.match.params}\n          />}\n      />\n      <Route\n        path=\"/fav/import\"\n        render={(router) => \n          <FavoriteImportView\n            models={models}\n            history={router.history}\n          />}\n      />\n      <Route\n        path=\"/fav/list\"\n        render={(router) => \n          <FavoriteListView\n            models={models}\n            history={router.history}\n          />}\n      />\n    </Router>\n  );\n}\n\nexport default App;\n","\"use struct\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nimport CircleModel from './models/Circle';\nimport ProductModel from './models/Product';\nimport FavoriteModel from './models/Favorite';\n\nimport App from './App';\n\n\nconst models = {\n  circle:  new CircleModel(),\n  product: new ProductModel(),\n  favorite: new FavoriteModel(),\n};\n\nmodels.circle.request();\n\nReactDOM.render(\n  <App models={models} />,\n  document.getElementById('root')\n);\n\n// アプリをオフラインで動作させてより速くロードしたい場合は、以下で unregister() を\n// register() に変更できます。これにはいくつかの落とし穴があります。\n// サービスワーカーの詳細: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n\n// 要求スペック\n//   config#onUpdate(registration);\n//   config#onSuccess(registration);\n// serviceWorker.register(config);\n"],"sourceRoot":""}